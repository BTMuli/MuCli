#!/usr/bin/env node
import e from"process";import{exec as t}from"child_process";import n from"axios";import a from"chalk";import{Command as i}from"commander";import o from"inquirer";import s from"ora";import{resolve as r}from"path";import c from"app-root-path";import l from"fs-extra";import p from"yamljs";import m from"node:fs";import*as u from"toml";var d;function f(){if(c.path.endsWith("dist"))return c.resolve("../");const e=r(c.path,"node_modules","@btmuli","mucli","package.json");return l.existsSync(e)?e:c.path}function h(){const e=r(f(),"package.json");return l.readJSONSync(e)}function y(e){return h().subVersion[e]}function g(e=!1){const t=r(f(),"config"),n=r(t,"default.yml");if(e)return n;const a=p.load(n).update,i=r(t,"user.yml");l.existsSync(i)||l.copyFileSync(n,i);return p.load(i).update<a&&l.copyFileSync(n,i),i}function w(e=!1){const t=g(e);return p.load(t)}function b(){const e=w(),t=[];return e.dev.enable&&t.push("dev"),e.mmd.enable&&t.push("mmd"),e.pip.enable&&t.push("pip"),e.rs.enable&&t.push("rs"),t}!function(e){e.dev="dev",e.mmd="mmd",e.pip="pip",e.rs="rs"}(d||(d={}));const v=new i,$=h().version;v.name("muc").description(h().description).version($,"-v, --version"),v.command("set").description("set subcommand on or off").action((async()=>{const e=b(),t=["dev","mmd","pip","rs"].map((t=>e.includes(t)?{name:t,value:t,checked:!0}:{name:t,value:t,checked:!1}));await o.prompt([{type:"checkbox",name:"command",message:"Please select the subcommand you want to open",choices:t}]).then((async e=>{!function(e){const t=w();t.dev.enable=e.includes("dev"),t.mmd.enable=e.includes("mmd"),t.pip.enable=e.includes("pip"),t.rs.enable=e.includes("rs");const n=g();l.writeFileSync(n,p.stringify(t,4,2))}(e.command)}))})),v.command("update").description("check and update from upstream").action((async()=>{const e=s("Checking update...").start(),i=(await n.get("https://registry.npmjs.org/@btmuli/mucli")).data["dist-tags"].latest;if($<i){e.stop();if(!0===(await o.prompt([{type:"confirm",name:"update",message:`There is a new version ${a.blue(i)}, update?`,default:!0}])).update){const e=s("Updating...").start();t("npm i -g @btmuli/mucli",((t,n,i)=>{let o="";null!==t&&(o=t.message),null!==i&&""!==i&&(o=""===o?i:`${o}\n${i}`),""!==o?(o=`Updated failed\n${a.red(o,n)}`,e.fail(o)):(o="Updated successfully",e.succeed(o)),e.stop()}))}}else e.succeed("MuCli is latest!")})),v.command("test [url]").option("-t, --timeout <timeout>","set the timeout of request","10").description("test the time to request the site").action((async(e,t)=>{let i,o=e;i=void 0!==t.timeout?parseInt(t.timeout):10,i=isNaN(i)?10:i,void 0===o&&(o="https://www.github.com");const r=`Testing Website Response Time for ${a.blue(o)}`,c=s(`${r} 0.00/${i}`).start();let l="0.00";const p=setInterval((()=>{l=(parseFloat(l)+.1).toFixed(1),c.text=`${r} ${l}/${i}`}),100);n.get(o,{timeout:1e3*i}).then((e=>{clearInterval(p),c.succeed(`Response Time: ${a.blue(e.headers["x-response-time"])}`)})).catch((e=>{clearInterval(p);const t=e.isAxiosError?e.message:JSON.stringify(e.toJSON());c.fail(`Request failed, cost time: ${a.red(l)}s\n${t}`)}))}));const S=new i("dev"),k=y(d.dev);async function F(){switch((await o.prompt([{type:"list",name:"type",message:"What do you want to do about label?",choices:[{name:"See all labels",value:"see"},{name:"Create a new label",value:"create"},{name:"Update a label",value:"update"},{name:"Delete label(s)",value:"delete"},{name:"Do nothing",value:"nothing"}]}])).type){case"see":await async function(){const e=w(),t=e.mmd.defaultLabel;console.log(a.green("Default label:"),x(t));const n=e.mmd.labels;if(console.log(a.green("Custom labels:")),0===n.length)return void console.log(a.yellow("\tNo custom labels"));for(const e of n)console.log("\t",x(e))}();break;case"create":await C();break;case"update":await D();break;case"delete":await async function(){const e=w().mmd.labels;if(0===e.length)return void s("No custom labels").fail();const t=e.map((e=>({name:e.filename,value:e.filename,checked:!1}))),n=await o.prompt([{type:"checkbox",name:"filename",message:"Which label(s) do you want to delete ?",choices:t}]);if(!1===(await o.prompt([{type:"confirm",name:"confirm",message:"Are you sure to delete these labels ?"}])).confirm)return;const a=[];e.forEach((e=>{!1===n.filename.includes(e.filename)&&a.push(e)}));const i=w();i.mmd.labels=a,l.writeFileSync(g(),p.stringify(i,4,2)),s("Delete successfully").succeed()}()}}function x(e){return`[filename] ${a.yellow(e.filename)} [author] ${a.yellow(e.author)} [description] ${a.yellow(e.description)}`}async function C(e){const t=w(),n=t.mmd.labels,a=t.mmd.defaultLabel,i=await o.prompt([{type:"input",name:"filename",message:"Filename:",default:e??""}]);if(i.filename===a.filename||n.some((e=>e.filename===i.filename))){i.filename===a.filename&&s("The label is already exists as the default label!").fail();const e=n.find((e=>e.filename===i.filename));if(void 0===e)return;if(!1===(await o.prompt([{type:"confirm",name:"confirm",message:`The label already exists, do you want to update the label ?\n${x(e)}`}])).confirm)return;await D(i.filename)}else{const e=await o.prompt([{type:"input",name:"author",message:"Author:",default:a.author},{type:"input",name:"description",message:"Description:",default:a.description}]),s={filename:i.filename,author:e.author,description:e.description};if(!1===(await o.prompt([{type:"confirm",name:"confirm",message:`Do you want to create the label ?\n${x(s)}`}])).confirm)return;n.push(s),t.mmd.labels=n,l.writeFileSync(g(),p.stringify(t,4,2))}}async function D(e,t=!1){const n=await o.prompt([{type:"input",name:"input",message:"Please input the filename of the label you want to update:",default:e??""}]),a=w().mmd.labels,i=a.find((e=>e.filename=n.input));if(0===a.length||void 0===i){if(!1===(await o.prompt([{type:"confirm",name:"confirm",message:"The label is not exist yet, create a new ?",default:!0}])).confirm)return;await C(n.input)}else{const e=await o.prompt([{type:"input",name:"author",message:"Author: ",default:i.author},{type:"input",name:"description",message:"Description: ",default:i.description}]),t={filename:n.input,author:e.author,description:e.description};if(!(await o.prompt([{type:"confirm",name:"confirm",message:`Are you sure to update ?\n\tOld: ${x(i)}\n\tNew:${x(t)}`}])).confirm)return;a.forEach((e=>{e.filename===n.input&&(e=t)}));const s=w();s.mmd.labels=a,l.writeFileSync(g(),p.stringify(s,4,2))}}function A(e){const t=new Date,n=t.getFullYear().toString().padStart(4,"0"),a=(t.getMonth()+1).toString().padStart(2,"0"),i=t.getDate().toString().padStart(2,"0"),o=t.getHours().toString().padStart(2,"0"),s=t.getMinutes().toString().padStart(2,"0"),r=t.getSeconds().toString().padStart(2,"0");return!0===e?`${n}-${a}-${i} ${o}:${s}:${r}`:`${n}-${a}-${i}`}function E(e){let t="./README.md";return void 0!==e&&(t=e.endsWith(".md")?e:e+=".md"),t}function M(e){let t;return t=e.includes("\\")?e.split("\\").pop():e.includes("/")?e.split("/").pop():e,void 0===t&&(t="README"),t.endsWith(".md")&&(t=t.split(".md")[0]),t}function j(e,t,n){let a=0;const i=r(f(),"template","MuCli","README.md"),o=l.readFileSync(i,"utf-8"),s=A(!1),c=A(!0),p=o.split("\n");if(p.forEach(((a,i)=>{let o;if(1===i&&(o=a.replace("author",e),p[i]=o),2===i&&(o=a.replace("description",t),p[i]=o),4===i&&(o=a.replace("update",s),p[i]=o),9===i&&(o=a.replace("modify",c),p[i]=o),7===i&&(o=void 0!==n?.create?a.replace("create",n.create):a.replace("create",c),p[i]=o),3===i){if(void 0!==n?.create){const e=n.create.split(" ")[0];o=a.replace("date",e)}else o=a.replace("date",s);p[i]=o}})),void 0!==n?.raw){const e=["author","description","date","update"];let t=5;for(const i in n.raw)e.includes(i.toLowerCase())||(p.splice(t,0,`${i}: ${n.raw[i]}`),a+=1,t+=1)}return[p.join("\n"),a]}function T(e){let t;if(void 0===e)t="README.md";else if(e.includes(".")){if("md"!==e.split(".").pop())return!1;t=e}else t=`${e}.md`;if(!l.existsSync(t))return!1;const n=l.readFileSync(t,"utf-8"),a=n.match(/^---(\r\n|\n)(.*?)(\r\n|\n)---(\r\n|\n)/gs);if(null===a)return!1;const i=a[0],o=n.replace(i,""),s={author:"",description:"",date:"",update:"",create:"",modify:""},r=function(e){const t={};return e.split(/(\r\n|\n)/).forEach((e=>{if("---"===e||""===e)return;if(!e.includes(":"))return;if(e.startsWith("---"))return;const n=e.split(":")[0].trim();t[n]=e.split(":")[1].trim()})),t}(i);if(void 0===r)return!1;for(const e in r)if("Author"!==e&&"author"!==e||(s.author=r[e]),"Description"!==e&&"description"!==e||(s.description=r[e]),"Date"!==e&&"date"!==e||(s.date=r[e]),"Update"!==e&&"update"!==e||(s.update=r[e]),""!==s.author&&""!==s.description&&""!==s.date&&""!==s.update)break;const c=o.match(/生成于 `(.*)`/g);if(null!==c)s.create=c[0].split("`")[1];else{const e=l.statSync(t).birthtime;s.create=e.toLocaleString("zh-CN",{hour12:!1})}return{fm:s,raw:r}}async function N(e){const t=M(e),n=await o.prompt([{type:"input",name:"title",message:"Title:",default:t}]);""===n.title&&(n.title=t);const a=function(e){const t=w().mmd,n=t.defaultLabel;let a=t.labels.find((t=>t.filename===e));return void 0===a&&(a=n),a}(n.title),i=await o.prompt([{type:"input",name:"author",message:"Author:",default:a.author},{type:"input",name:"description",message:"Description:",default:a.description}]);return{filename:n.title,author:i.author,description:i.description}}async function R(e){const t=M(e);if(l.existsSync(e)){const n=T(e),i=[{name:"Create new file",value:"create"}];!1!==n?i.unshift({name:"Update frontmatter",value:"update"}):i.unshift({name:"Insert frontmatter",value:"insert"});switch((await o.prompt([{type:"list",name:"action",message:`File ${a.yellow(t)} already exists, what do you want to do?`,choices:i,default:!1===n?"insert":"update"}])).action){case"update":return void await U(e);case"insert":return void await async function(e){const t=await N(e),n=s("Inserting frontmatter").start(),a=j(t.author,t.description),i=l.readFileSync(e,"utf-8").split("\n");i.splice(0,0,...a[0].split("\n")),l.writeFileSync(e,i.join("\n")),n.succeed("Frontmatter inserted")}(e)}}const n=await N(e),i=s("Creating markdown file").start(),r=j(n.author,n.description);t!==n.filename&&(e=e.replace(t,n.filename)),l.createFileSync(e),l.writeFileSync(e,r[0]),i.succeed(`Markdown file ${a.yellow(n.filename)} created`)}async function U(e){const t=M(e),n=T(e);if(!1===n){!0===(await o.prompt([{type:"confirm",name:"create",message:`Frontmatter not found in ${a.yellow(t)}, create?`,default:!0}])).create&&await R(e)}else{if(!0===(await o.prompt([{type:"confirm",name:"update",message:`Frontmatter found in ${a.yellow(t)}, update?`,default:!0}])).update){const t=s("Updating frontmatter").start(),a=j(n.fm.author,n.fm.description,{create:n.fm.create,raw:n.raw}),i=l.readFileSync(e,"utf-8").split("\n");i.splice(0,11+a[1],...a[0].split("\n")),l.writeFileSync(e,i.join("\n")),t.succeed("Frontmatter updated")}}}S.name("dev").description("A cli tool for devtools").version(k,"-sv, --subversion"),S.command("run [script]").description("run pnpm script").action((async e=>{let n="build";const i=function(){const e=h();return Object.keys(e.scripts)}();if(void 0!==e){if(!i.includes(e))return void s(`Scripts: ${a.blue(e)} not found`).fail();n=e}const o=`pnpm ${n}`,r=s(`Running scripts: ${a.blue(o)}`).start();t(`pnpm ${n}`,{cwd:f()},((e,t,n)=>{let i="";null!==e&&(i=e.message),null!==n&&""!==n&&(i=""===i?n:`${i}\n${n}`),""!==i?(i=`Scripts: ${a.blue(o)} run failed\n${a.red(i,t)}`,r.fail(i)):(i=`Scripts: ${a.blue(o)} successfully`,r.succeed(i)),r.stop()}))})),S.command("update").description("update config file").action((()=>{const e=g(!0),t=p.load(e);t.update=Math.floor(Date.now()/1e3),l.writeFileSync(e,p.stringify(t,4,2))}));const W=new i("mmd"),I=y(d.mmd);W.name("mmd").description("A cli tool for markdown").version(I,"-sv, --subversion"),W.command("label").description("label crud").action((async()=>{await F()})),W.command("new [name]").description("create markdown file").action((async e=>{const t=E(e);await R(t)})),W.command("update [name]").description("update markdown frontmatter").action((async e=>{const t=E(e);await U(t)}));const O=new i("pip"),q=y(d.pip);async function L(e){const t="https://crates.io/api/v1/crates/"+e,n=h().version;await new Promise((e=>setTimeout(e,1e3)));const a=await(await fetch(t,{headers:{"User-Agent":`MuCli/${n}(BTMuli bt-muli@outlook.com)`}})).json();return[a.crate.max_stable_version,a.crate.max_version]}O.name("pip").description("A cli tool for pip").version(q,"-sv, --subversion"),O.command("mirror").description("mirror crud").action((async()=>{console.log("mirror")})),O.command("install [pkg]").description("install package").action((async e=>{if(void 0===e)return void console.log("search requirements.txt");t(`pip install ${e} -i https://pypi.tuna.tsinghua.edu.cn/simple`,((e,t,n)=>{null==e?console.log(t):console.log(e)}))}));const _=new i("rs"),J=y(d.rs);_.name("rs").description("A cli tool for rs").version(J,"-sv, --subversion"),_.command("update").description("update package").option("-p, --package <package>","package name").action((async e=>{const t=await async function(){let e=`${process.cwd()}/Cargo.toml`;if(m.existsSync(e)||(e=`${process.cwd()}/src/Cargo.toml`),m.existsSync(e)||(e=`${process.cwd()}/src-tauri/Cargo.toml`),!m.existsSync(e))return!1;try{const t=m.readFileSync(e,"utf-8"),n=u.parse(t)?.dependencies;if(void 0===n)return!1;for(const e in n)"object"==typeof n[e]&&(n[e]=n[e].version);return n}catch(e){return!1}}();if(!1===t)return void console.log("No Cargo.toml file found or parse failed");if(void 0!==e.package){if(Object.keys(t).includes(e.package)){const n=s(`Checking dependency ${e.package}`).start(),a=await L(e.package);n.succeed(`Check dependency ${e.package} success`),console.table({name:e.package,version:t[e.package],stable:a[0],latest:a[1]})}else console.log(`The package ${e.package} is not in the dependencies`);return}const n=[],a=s("Checking dependencies").start();for(const e in t){a.text=`Checking ${e}`;const i=await L(e);n.push({name:e,version:t[e],stable:i[0],latest:i[1]})}a.succeed("Check dependencies success"),console.table(n)})),function(e,t){const n=b();for(const a of t)n.includes(a.name())&&e.addCommand(a)}(v,[W,S,O,_]),v.parse(e.argv);
