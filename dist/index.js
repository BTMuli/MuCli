#!/usr/bin/env node
import{Command as e}from"commander";import{dirname as t,join as i,resolve as n}from"path";import{readFileSync as o,existsSync as a,mkdirSync as r,writeFile as s,stat as l,readFile as m}from"fs";import{fileURLToPath as c}from"url";import p from"yamljs";import{promisify as h}from"util";import d from"inquirer";import{exec as u,execFile as f}from"child_process";import{format as g}from"silly-datetime";import{platform as y}from"os";import w from"axios";const b=t(t(c(import.meta.url))),v=JSON.parse(o(i(b,"package.json")).toString());class ${createDir(e){return!!a(e)||(this.createDir(t(e))?(r(e),!0):void 0)}createFile(e,t){try{if(-1!==e.indexOf("/")){const t=e.split("/").pop(),i=e.length-t.length,n=e.substring(0,i);this.createDir(n)}s(e,t,(t=>{t?console.log(`\n文件 ${e} 创建失败！\n${t}\n`):console.log(`\n文件 ${e} 创建成功！\n`)}))}catch(t){console.log(`\n文件 ${e} 创建失败！\n${t}\n`)}}writeFile(e,t){s(e,t,(t=>{t?console.log(`\n文件 ${e} 写入失败！\n${t}\n`):console.log(`\n文件 ${e} 写入成功！\n`)}))}async fileExist(e){try{return(await h(l)(e)).isFile()}catch(e){return!1}}async readLine(e,t){try{const i=await h(m)(e,"utf-8"),n=-1!==i.indexOf("\r\n")?"\r\n":"\n",o=i.split(n),a=o.length;return o.slice(0,t>a?a:t)}catch(t){console.log(`\n文件 ${e} 读取失败！\n${t}\n`)}}async insertLine(e,t,i){try{const n=await h(m)(e,"utf-8"),o=-1!==n.indexOf("\r\n")?"\r\n":"\n",a=n.split(o);return a.length>=t?(a.splice(t,0,i+o),this.writeFile(e,a.join(o)),!0):(console.log(`\n文件 ${e} 行数不足！\n`),!1)}catch(t){return console.log(`\n文件 ${e} 插入失败！\n${t}\n`),!1}}async updateLine(e,t,i){try{const n=await h(m)(e,"utf-8"),o=-1!==n.indexOf("\r\n")?"\r\n":"\n",a=n.split(o);return a.length>=t?(a.splice(0,t,i),this.writeFile(e,a.join(o)),!0):(console.log(`\n文件 ${e} 行数不足！\n`),!1)}catch(t){return console.log(`\n文件 ${e} 覆盖失败！\n${t}\n`),!1}}}class C{constructor(e){this.configPath=void 0===e?b+"\\config_default\\config.yml":b+e,this.mucFile=new $}readYaml(e){return void 0===e&&(e=this.configPath),p.load(e)}readYamlDetail(e,t){let i=e;return t.map((e=>{i=i[e]})),i}changeYaml(e,t,i,n){void 0===e&&(e=this.configPath);const o=this.readYaml(e);let a=o;"string"!=typeof t?null==t||t.forEach(((e,o)=>{o===t.length-1?a[e][i]=n:a=a[e]})):o[t][i]=n,this.mucFile.writeFile(e,p.stringify(o,4))}}class M{constructor(e,t,i){this.author="BTMuli<bt-muli@outlook.com>",this.name=e,this.command=t,this.description=i}transCommand(e){return e[0].toUpperCase()+e.slice(1).toLowerCase()}getFilesPath(){const e=this.command+".ts";return{cliPath:`${b}\\src\\cli\\${e}`,utilsPath:`${b}\\src\\utils\\${e}`,configPath:`${b}\\src\\config\\${e}`}}getFileHeader(){return`/**\n * @author ${this.author}\n * @description ${this.description}\n * @version 0.0.1\n */\n\n`}getCliModel(){const e=this.command+".ts",t=this.transCommand(this.name);return this.getFileHeader()+'/* Node */\nimport { Command } from "commander";\n/* MuCli */\nimport { PROJECT_INFO } from "../config";\nimport '+t+' from "../utils/'+e+'";\n\nconst '+this.name+":"+t+" = new "+t+"();\n\n/* 版本管理 */\nconst "+t+'Version:string = PROJECT_INFO["subversion"]["'+this.command+'";\n\n/* 基本信息 */\n'+this.name+'.name("'+this.command+'")\n\t.description("'+this.description+'")\n\t.version('+t+'Version)\n\t\t"-sv, --subversion",\n\t\t"output the subversion of MuCli-'+t+'"\n\t);\n\nexport default '+this.name+";\n"}getUtilsModel(){const e=this.command+".ts",t=this.transCommand(this.name);return this.getFileHeader()+'/* Node */\nimport { prompt } from "inquirer";\n/* MuCli */\nimport MucFile from "./file";\nimport '+t+'Model from "../config/'+e+'";\n\nclass '+t+" {}\n\nexport default "+t+";\n"}getConfigModel(){const e=this.transCommand(this.name);return this.getFileHeader()+"class "+e+"Model{}\n\nexport default "+e+"Model;\n"}}class k{updatePackage(e,t){const i=v;"all"===e?i.version=t:i.subversion[e]=t,(new $).writeFile(`${b}\\package.json`,JSON.stringify(i,null,2))}createNew(e){const t=new $;d.prompt([{type:"input",message:"请输入子命令名称",name:"name",default:e||"test"},{type:"input",message:"请输入子命令",name:"command",default:e||"test"},{type:"input",message:"请输入子命令描述",name:"description",default:`A SubCommand within MuCli for ${e||"test"}`}]).then((async e=>{const i=new M(e.name,e.command,e.description),n=i.getFilesPath();await t.writeFile(n.cliPath,i.getCliModel()),await t.writeFile(n.utilsPath,i.getUtilsModel()),await t.writeFile(n.configPath,i.getConfigModel()),this.updatePackage(e.command,"0.0.1")}))}getUpVersion(e){return[e.split(".").map(((e,t)=>2===t?Number(e)+1:e)).join("."),e.split(".").map(((e,t)=>t>1?0:1===t?Number(e)+1:e)).join("."),e.split(".").map(((e,t)=>0===t?Number(e)+1:0)).join(".")].map((e=>({name:e,value:e})))}checkVersion(e,t){return/^(\d+\.){2}\d+$/.test(e)?!(e<t)||(console.log("新版本号不能小于当前版本号"),!1):(console.log("版本号格式不正确"),!1)}updateMucVersion(e){const t=v.version;this.checkVersion(e,t)&&(this.updatePackage("all",e),e!==t?(console.log(`\n版本号已更新 ${t} -> ${e}`),console.log("请运行 npm install 更新依赖\n")):console.log(`\n版本号未更新，当前 MuCli 版本为 ${t}\n`))}updateSubVersion(e,t){const i=v.subversion[e];this.checkVersion(t,i)&&(this.updatePackage(e,t),t!==i?console.log(`\n版本号已更新 ${i} -> ${t}\n`):console.log(`\n版本号未更新，当前 ${e} 版本为 ${i}\n`))}updateVersion(){const e=Object.keys(v.subversion).map((e=>({name:`${e}(${v.subversion[e]})`,value:[e,v.subversion[e]]})));d.prompt([{type:"list",message:"请选择要更新的命令",name:"command",choices:[{name:`muc(${v.version})`,value:["muc",v.version]},...e,{name:"不更新任何命令",value:["null"]}]}]).then((e=>{if("null"===e.command[0])return void console.log("\n未更新任何命令\n");const t=e.command[1];d.prompt([{type:"list",message:`请选择新的 ${e.command[0]} 版本号`,name:"version",choices:[...this.getUpVersion(t),{name:"手动输入",value:"input"},{name:"不更新",value:t}]},{type:"input",name:"input",message:`请输入新的 ${e.command[0]} 版本号:`,when:e=>"input"===e.version}]).then((t=>{const i="input"===t.version?t.input:t.version;"muc"===e.command[0]?this.updateMucVersion(i):this.updateSubVersion(e.command[0],i)}))}))}}const T=v.subversion.dev,L=new e;L.name("dev").description("A SubCommand within MuCli for SubCommand").version(T,"-sv, --subversion","output the subversion of MuCli-Dev"),L.command("new").option("-c, --command [command]","create a new command","test").action((e=>{(new k).createNew(e.command)})),L.command("update").description("update the version of a command").action((()=>{(new k).updateVersion()}));class F{constructor(e="",t=""){this.sign="---",this.lineBreak="win32"===process.platform?"\r\n":"\n",this.quote="> 本文档 [`Front-matter`](https://github.com/BTMuli/Mucli#FrontMatter) 由 [MuCli](https://github.com/BTMuli/Mucli) 自动生成于",this.author=e,this.description=t}getHeader(){const e=g(new Date,"YYYY-MM-DD");return this.sign+this.lineBreak+"Author: "+this.author+this.lineBreak+"Date: "+e+this.lineBreak+"Description: "+this.description+this.lineBreak+"Update: "+e+this.lineBreak+this.sign+this.lineBreak+this.lineBreak+this.quote+"`"+g(new Date,"YYYY-MM-DD HH:mm:ss")+"`"+this.lineBreak+"> "+this.lineBreak+"> 更新于 `"+g(new Date,"YYYY-MM-DD HH:mm:ss")+"`"}async readHeader(e){const t=await(new $).readLine(e,10);return{header:{author:t[1].split(":")[1].trim(),date:t[2].split(":")[1].trim(),description:t[3].split(":")[1].trim(),update:t[4].split(":")[1].trim()},quote:{date:t[7].split("`")[3],update:t[9].split("`")[1]}}}async updateHeader(e){const t=await this.readHeader(e);return t.header.update=g(new Date,"YYYY-MM-DD"),t.quote.update=g(new Date,"YYYY-MM-DD HH:mm:ss"),t}async writeHeader(e){const t=await this.updateHeader(e);return this.sign+this.lineBreak+"Author: "+t.header.author+this.lineBreak+"Date: "+t.header.date+this.lineBreak+"Description: "+this.description+this.lineBreak+"Update: "+t.header.update+this.lineBreak+this.sign+this.lineBreak+this.lineBreak+this.quote+"`"+t.quote.date+"`"+this.lineBreak+"> "+this.lineBreak+"> 更新于 `"+t.quote.update+"`"}}class D{constructor(e){this.config=new q,this.enable=e.enable,this.path=e.path}getConfig(){return{enable:this.enable,path:this.path}}saveConfig(){const e=this.getConfig();this.config.changeConfig(["mmd"],"typora",e)}showConfig(){console.table([{system:y()},{enable:this.enable},{path:this.path}])}changeConfig(e,t){console.log("\n正在更新配置文件..."),this.enable=e,this.path=void 0===t?this.path:t,this.saveConfig(),console.log("\n更新配置文件成功！"),this.showConfig()}manualTypora(){d.prompt([{type:"input",name:"path",message:"请输入 Typora 的路径"}]).then((e=>{this.changeConfig(!0,e.path)}))}findTypora(){u("REG QUERY 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Typora.exe'",((e,t,i)=>{if(e)return void console.log("error:",e);if(i)return void console.log("stderr:",i);-1!==t.indexOf("ERROR")&&d.prompt([{type:"confirm",name:"confirm",message:"未找到 Typora，是否手动输入 Typora 路径？",default:!0}]).then((e=>{e.confirm&&this.manualTypora()}));const n=t.split("REG_SZ")[1].trim();d.prompt([{type:"confirm",name:"path",message:`检测到本地 Typora 路径与配置文件不一致，是否更新配置文件？\n当前路径：${n}\n配置文件路径：${this.path}`,default:!0,when:()=>n!==this.path},{type:"confirm",name:"enable",message:`检测到本地 Typora 路径与配置文件一致，是否启用 Typora？\n当前路径：${n}\n配置文件路径：${this.path}`,default:!0,when:()=>n===this.path}]).then((e=>{e.path&&this.changeConfig(!0,n),e.enable&&this.changeConfig(!0)}))}))}initConfig(){const e=y();d.prompt([{type:"list",name:"typora",message:"请选择你的 Typora 配置情况",choices:[{name:"非 Windows 系统，未安装 Typora",value:"none"},{name:"非 Windows 系统，已安装 Typora",value:"notWindows"},{name:"Windows 系统，未安装 Typora",value:"notInstall"},{name:"Windows 系统，已安装 Typora",value:"windows"}],default:"win32"===e?"notInstall":"notWindows"}]).then((e=>{switch(e.typora){case"none":this.changeConfig(!1,"");break;case"notWindows":d.prompt([{type:"confirm",name:"check",message:"本命令行工具不支持非 windows 系统下的 Typora,但是你可以手动配置 Typora 的路径,是否手动配置?",default:!1}]).then((e=>{e.check&&this.manualTypora()}));break;case"notInstall":d.prompt([{type:"confirm",name:"check",message:"本命令行建议使用 Typora 编辑器,是否安装 Typora?",default:!1}]).then((e=>{e.check?(console.log("请手动安装 Typora，官网地址：https://typora.io/"),console.log("安装完成后，重新运行本命令行工具")):this.changeConfig(!1,"")}));break;case"windows":d.prompt([{type:"confirm",name:"check",message:"本命令行建议使用 Typora 编辑器,是否使用 Typora?",default:!0}]).then((e=>{e.check&&this.findTypora()}))}}))}verifyConfig(){const e=y();this.showConfig(),"win32"===e&&!1===this.enable?d.prompt([{type:"confirm",name:"enable",message:"检测到当前系统为 Windows，是否启用 Typora？",default:!0}]).then((e=>{e.enable&&this.findTypora()})):"win32"!==e&&!0===this.enable?d.prompt([{type:"confirm",name:"enable",message:"检测到当前系统非 Windows，建议关闭 Typora 配置,是否更新配置文件？",default:!0}]).then((e=>{e.enable&&this.changeConfig(!1)})):console.log("\n当前配置正确\n")}openFile(e){if(this.enable){const t=n()+"\\"+e;f(this.path,[t],((e,t,i)=>{e?console.error(`执行的错误: ${e}`):(console.log(`stdout: ${t}`),console.log(`stderr: ${i}`))}))}else d.prompt([{type:"confirm",name:"enable",message:"未启用 Typora，是否启用？",default:!0}]).then((e=>{e.enable&&this.verifyConfig()}))}}class I{constructor(){const e=(new q).readConfigDetail("mmd"),t=new D(e.typora);this.config=new q,this.label=e.label,this.label_default=e.label.default,this.typora=t,this.mucFile=new $}testTypora(){this.typora.verifyConfig()}showTypora(){this.typora.showConfig()}openTypora(e){this.typora.openFile(e)}modifyTypora(){this.showTypora(),d.prompt([{type:"checkbox",name:"typora",message:"请选择要修改的配置项",choices:[{name:"Typora 可用性",value:"enable"},{name:"Typora 配置文件路径",value:"path"}]},{type:"confirm",name:"enable",message:`确认修改可用性？（当前${this.typora.enable?"可用":"不可用"}）`,when:e=>e.typora.includes("enable"),default:!0},{type:"input",name:"path",message:"请输入 Typora 配置文件路径",when:e=>e.typora.includes("path"),default:this.typora.path}]).then((e=>{0===e.typora.length?console.log("\n未对Typora配置进行修改。"):(e.typora.includes("enable")&&(this.typora.enable=!this.typora.enable),e.typora.includes("path")&&(this.typora.path=e.path),this.typora.saveConfig(),console.log("\nTypora 配置修改成功")),this.showTypora()}))}operaTypora(){d.prompt([{type:"list",name:"typora",message:"请选择要进行的操作",choices:[{name:"初始化 Typora 配置",value:"init"},{name:"检测 Typora 配置",value:"test"},{name:"查看 Typora 配置",value:"show"},{name:"修改 Typora 配置",value:"modify"},{name:"查看 muc mmd typora 命令说明",value:"help"},{name:"退出",value:"exit"}]}]).then((e=>{switch(e.typora){case"init":this.typora.initConfig();break;case"test":this.testTypora();break;case"show":this.showTypora();break;case"modify":this.modifyTypora();break;case"help":u("muc mmd typora -h",((e,t,i)=>{e?console.log(e):i?console.log(i):t&&console.log(t)}))}}))}checkLabel(e){const t=this.label.custom,i={author:this.label.default.author,description:e,filename:e};return null===t||t.map((t=>{if(t.filename===e)return t})),i}changeLabel(e){(new q).changeConfig(["mmd","label"],"custom",e)}addLabel(e){void 0===this.checkLabel(e).author?d.prompt([{type:"input",name:"author",message:"请输入作者",default:this.label.default.author},{type:"input",name:"description",message:"请输入描述",default:this.label_default.description}]).then((t=>{const i={author:t.author,description:t.description,filename:e};console.log(i),d.prompt([{type:"confirm",name:"create",message:`是否创建 Label ${e}`,default:!1}]).then((e=>{if(e.create){let e=this.label.custom;null==e&&(e=[]),e.push(i),this.changeLabel(e)}}))})):console.log(`Label ${e} 已存在`)}getLabel(e="all"){const t=this.label;if("all"===e)console.log(t);else{const t=this.checkLabel(e);void 0!==t.author?console.log(t):d.prompt([{type:"confirm",name:"create",message:`Label ${e} 不存在，是否创建？`,default:!1}]).then((t=>{t.create&&this.addLabel(e)}))}}delLabel(e){void 0!==this.checkLabel(e).author?d.prompt([{type:"confirm",name:"delete",message:`是否删除 Label ${e}`,default:!1}]).then((t=>{if(t.delete){let t=this.label.custom;t=t.filter((t=>t.filename!==e)),this.changeLabel(t)}})):console.log(`Label ${e} 不存在`)}async checkHeader(e){const t=await this.mucFile.readLine(e,10);return!(10!==t.length||"---"!==t[0])}async createFile(e,t,i){const n=new F(t,i),o=e+".md";if(await this.mucFile.fileExist(o)){const e=await this.checkHeader(o);d.prompt([{type:"list",name:"action",message:`文件 ${o} 已存在，未检测到文件头，执行以下操作：`,choices:[{name:"覆盖",value:"cover"},{name:"插入文件头",value:"insert"}],when:!e,default:"insert"},{type:"list",name:"action",message:`文件 ${o} 已存在，检测到文件头，执行以下操作：`,choices:[{name:"覆盖",value:"cover"},{name:"更新文件头",value:"update"},{name:"不执行任何操作",value:"none"}],when:e,default:"none"}]).then((async e=>{switch(e.action){case"cover":await this.mucFile.writeFile(o,n.getHeader());break;case"insert":await this.mucFile.insertLine(o,0,n.getHeader());break;case"update":await this.mucFile.updateLine(o,0,await n.writeHeader(o))}}))}else await this.mucFile.writeFile(o,n.getHeader())}promptCreateFile(e){d.prompt([{type:"input",name:"title",message:"请输入文件名称",default:e||this.label_default.filename}]).then((async e=>{if(e.title===this.label_default.filename)await d.prompt([{type:"input",name:"author",message:"请输入作者",default:this.label_default.author},{type:"input",name:"description",message:"请输入描述",default:this.label_default.description}]).then((async t=>{await this.createFile(e.title,t.author,t.description)}));else{const t=this.checkLabel(e.title);await d.prompt([{type:"input",name:"author",message:"请输入作者",default:t.author},{type:"input",name:"description",message:"请输入描述",default:t.description}]).then((async t=>{await this.createFile(e.title,t.author,t.description)}))}}))}async promptUpdateFile(e){if(await this.mucFile.fileExist(e)){const t=await this.checkHeader(e);d.prompt([{type:"confirm",name:"insert",message:`文件 ${e} 未检测到文件头，是否插入文件头？`,when:!t,default:!0},{type:"confirm",name:"update",message:`文件 ${e} 已存在，是否更新文件头？`,when:t,default:!0}]).then((async t=>{const i=e.replace(/\.md$/,"");if(t.insert){const t=this.checkLabel(i);await d.prompt([{type:"input",name:"author",message:"请输入作者",default:t.author},{type:"input",name:"description",message:"请输入描述",default:t.description}]).then((async t=>{const i=new F(t.author,t.description);await this.mucFile.insertLine(e,0,i.getHeader())}))}else if(t.update){const t=new F;await this.mucFile.updateLine(e,0,await t.writeHeader(e))}}))}else d.prompt([{type:"confirm",name:"create",message:`文件 ${e} 不存在，是否创建文件？`,default:!1}]).then((async t=>{if(t.create){const t=e.replace(/\.md$/,"");await this.promptCreateFile(t)}}))}}const Y=v.subversion.mmd,E=new e;E.name("mmd").description("A SubCommand within MuCli for Markdown").version(Y,"-sv, --subversion","output the subversion of MuCli-Markdown"),E.command("new").option("-n, --name <name>","the name of the new markdown file","README").description("create a markdown file").action((e=>{(new I).promptCreateFile(e.name)})),E.command("update").option("-n, --name <name>","the name of the markdown file","README").description("update the header of the markdown file").action((async e=>{const t=new I;await t.promptUpdateFile(e.name)})),E.command("typora").option("-n, --name [name]","the name of the markdown file").description("open file with Typora").option("-i, --info","get the path of Typora").description("get local typora path").option("-s, --set [path]","set the path of Typora").option("-t, --test","test the config of Typora").action((e=>{const t=new I;e.info?t.showTypora():e.set?t.modifyTypora():e.name?t.openTypora(e.name):e.test?t.testTypora():t.operaTypora()})),E.command("label").option("-l, --list","get the list of markdown label").description("get the list of markdown label").option("-g, --get <name>","get the markdown label").description("get the template").option("-d, --delete <name>","delete the markdown label").description("delete the template").option("-a, --add <name>","add the markdown label").description("add the template").action((e=>{const t=new I;e.list?t.getLabel("all"):e.get?t.getLabel(e.get):e.delete?t.delLabel(e.delete):e.add&&t.addLabel(e.add)}));class U{constructor(e){this.name=e.name,this.url=e.url,void 0!==e.usable?this.usable=e.usable:this.usable=!1}async verifyMirror(e){let t;void 0===e&&(e=this.url);try{const i=(new Date).getTime();await w.get(e,{timeout:5e3});t=(new Date).getTime()-i}catch(e){t=-1}return t}outputMirrorInfo(){console.log(`镜像名称：${this.name}，镜像地址：${this.url}，是否可用：${this.usable}`)}}class x{constructor(e,t){this.mirrorUse=e,this.mirrorList=t}getMirrorList(){return this.mirrorList.map((e=>new U(e)))}getMirrorUse(){return new U(this.mirrorList.find((e=>e.name===this.mirrorUse)))}outputMirrorList(){this.getMirrorList().forEach((e=>{e.outputMirrorInfo()}))}mirrorExist(e){return void 0!==this.mirrorList.find((t=>t.name===e))}setMirrorUse(e){this.mirrorExist(e)?(this.mirrorUse=e,console.log(`当前使用的镜像已设置为：${e}`)):console.log(`镜像 ${e} 不存在`)}async addMirror(e,t){if(this.mirrorExist(e))return void console.log(`镜像 ${e} 已存在`);const i=new U({name:e,url:t,usable:void 0,time:void 0}),n=await i.verifyMirror();-1===n||n>=2e3?console.log(`镜像 ${e} 不可用`):(this.mirrorList.push({name:e,url:t,usable:!0,time:void 0}),console.log(`镜像 ${e} 已添加，耗时 ${n} ms`))}deleteMirror(e){this.mirrorExist(e)?(this.mirrorList.splice(this.mirrorList.findIndex((t=>t.name===e),1)),console.log(`镜像 ${e} 已删除`)):console.log(`镜像 ${e} 不存在`)}async updateMirror(e,t){if(!this.mirrorExist(e))return void console.log(`镜像 ${e} 不存在`);const i=new U({name:e,url:t,usable:void 0,time:void 0}),n=await i.verifyMirror();if(-1===n||n>=2e3)return void console.log(`镜像 ${e} 不可用`);const o=this.mirrorList.find((t=>t.name===e));o.url=t,o.usable=!0,console.log(`镜像 ${e} 已更新，耗时 ${n} ms`)}async testMirror(e){if(!this.mirrorExist(e))return console.log(`镜像 ${e} 不存在`),-1;const t=this.mirrorList.find((t=>t.name===e)),i=new U(t),n=await i.verifyMirror();return-1===n||n>=2e3?(console.log(`镜像 ${e} 不可用`),-1):(console.log(`镜像 ${e} 可用，耗时 ${n} ms`),n)}}class H{constructor(){const e=(new q).readConfigDetail("pip");this.pipConfig=new q;const t=e.mirrorUse,i=[];e.mirrorList.forEach((e=>{i.push(new U(e))})),this.mirrorInfo=new x(t,i)}install(e){const t=this.mirrorInfo.getMirrorUse().url;let i="",n=process.env.VIRTUAL_ENV;void 0!==n?n+="\\Scripts\\pip.exe":n="pip",void 0!==e.package?i=`${n} install ${e.package} -i ${t}`:void 0!==e.requirement&&(i=`${n} install -r ${e.requirement} -i ${t}`),console.log(`执行命令：${i}`),u(i,((e,t,i)=>{e?console.log(e):(console.log(t),i&&console.log(i))}))}showMirror(){this.mirrorInfo.outputMirrorList()}async addMirror(e){if(this.mirrorInfo.mirrorExist(e))console.log(`镜像源 ${e} 已存在！`);else{const t=await d.prompt([{type:"input",name:"name",message:"请输入镜像源名称：",default:e},{type:"input",name:"url",message:"请输入镜像源地址："}]);await this.mirrorInfo.addMirror(t.name,t.url),console.log(`正在将 ${t.name} 写入配置文件...`),this.pipConfig.changeConfig(["pip"],"mirrorList",this.mirrorInfo.mirrorList),console.log(`镜像源 ${t.name} 添加成功！`)}}async deleteMirror(e){this.mirrorInfo.mirrorExist(e)?d.prompt([{type:"confirm",name:"confirm",message:`是否删除镜像源 ${e}？`,default:!1}]).then((async t=>{t.confirm&&(await this.mirrorInfo.deleteMirror(e),console.log("正在更新配置文件..."),this.pipConfig.changeConfig(["pip"],"mirrorList",this.mirrorInfo.mirrorList),console.log(`镜像源 ${e} 删除成功！`))})):console.log(`镜像源 ${e} 不存在！`)}async verifyMirror(e){if(void 0!==e)this.mirrorInfo.mirrorExist(e)?await this.mirrorInfo.testMirror(e):d.prompt([{type:"confirm",name:"confirm",message:`镜像源 ${e} 不存在，是否添加？`,default:!1}]).then((async t=>{t.confirm&&await this.addMirror(e)}));else{const e=this.mirrorInfo.mirrorList;e.map((async e=>{const t=await this.mirrorInfo.testMirror(e.name);e.usable=-1!==t,e.time=t}));const t=e.filter((e=>e.usable)),i=t.reduce(((e,t)=>e.time<t.time?e:t)),n=e.find((e=>e.name===this.mirrorInfo.mirrorUse));console.log(`\n测试镜像源数量：${e.length}，可用镜像源数量：${t.length}`),console.log(`\n当前使用镜像源：${n.name}，${n.url}，${-1===n.time?"不可用":"耗时："+n.time+"ms"}`),console.log(`\n最快镜像源：${i.name}，${i.url}，耗时：${i.time}ms\n`),i.name!==n.name&&await d.prompt([{type:"confirm",name:"confirm",message:`是否切换到 ${i.name} 镜像源？`,default:!1}]).then((async e=>{e.confirm&&await this.mirrorInfo.setMirrorUse(i.name),this.pipConfig.changeConfig(["pip"],"mirrorList",this.mirrorInfo.mirrorList)})),await d.prompt([{type:"confirm",name:"confirm",message:"是否更新配置文件？",default:!1}]).then((async t=>{t.confirm&&(e.map((e=>{delete e.time})),console.log("\n正在更新配置文件..."),this.pipConfig.changeConfig(["pip"],"mirrorList",e),console.log("\n更新配置文件成功!\n"))}))}}async setMirrorUse(e){this.mirrorInfo.mirrorExist(e)?(await this.mirrorInfo.setMirrorUse(e),console.log("正在更新配置文件..."),this.pipConfig.changeConfig(["pip"],"useMirror",this.mirrorInfo.mirrorUse),console.log("更新配置文件成功！")):console.log(`\n镜像源 ${e} 不存在！\n`)}async updateMirror(e){this.mirrorInfo.mirrorExist(e)?d.prompt([{type:"input",name:"url",message:"请输入镜像源地址：",default:this.mirrorInfo.mirrorList.find((t=>t.name===e)).url}]).then((async t=>{await this.mirrorInfo.updateMirror(e,t.url),console.log("正在更新配置文件..."),this.pipConfig.changeConfig(["pip"],"mirrorList",this.mirrorInfo.mirrorList),console.log("更新配置文件成功！")})):console.log(`\n镜像源 ${e} 不存在！\n`)}}const B=v.subversion.pip,P=new e;P.name("pip").description("A SubCommand within MuCli for pip").version(B,"-sv, --subversion","output the subversion of MuCli-Pip"),P.command("install").description("install package").option("-p, --package [package]","install package").option("-r, --requirement [requirement]","install requirement").action((e=>{(new H).install(e)})),P.command("test").description("test mirror").option("-n, --name [name]","mirror name").action((async e=>{const t=new H;e.name?await t.verifyMirror(e.name):await t.verifyMirror()})),P.command("mirror").description("handle mirror").option("-a, --add [add]","add mirror").option("-d, --delete [delete]","delete mirror").option("-s, --set [set]","set mirror").option("-l, --list","list mirror").option("-u, --update","update mirror").action((async e=>{const t=new H;e.add?await t.addMirror(e.add):e.delete?await t.deleteMirror(e.delete):e.set?await t.setMirrorUse(e.set):e.update?await t.updateMirror(e.update):e.list&&await t.showMirror()}));const V=[L,E,P];var q=class{constructor(e){void 0===e&&(e="\\config_default\\config.yml"),this.configPath=b+e,this.mucYaml=new C(e)}readConfig(){return this.mucYaml.readYaml()}readConfigDetail(e){let t=this.readConfig();return"string"!=typeof e?null==e||e.map((e=>{t=t[e]})):t=t[e],t}commandUse(e){return this.readConfigDetail(e.name()).enable}loadConfig(e){V.map((t=>{this.commandUse(t)&&e.addCommand(t)}))}changeConfig(e,t,i){const n=this.mucYaml.configPath;this.mucYaml.changeYaml(n,e,t,i)}transConfig(e,t){const i=V.map((e=>e.name()));["on","off"].includes(t)&&(i.includes(e)||"all"===e)?"all"===e?i.map((e=>{this.changeConfig(e,"enable","on"===t)})):this.changeConfig(e,"enable","on"===t):console.log("参数错误")}};const O=v.version,N=new e;N.name("muc").version(O,"-v, --version").description("A Node Cli for Personal Use by BTMUli."),N.option("-l, --list","list all commands").action((e=>{if(e.list){const e=new q,t=[];t.muc={version:O,enable:!0,description:N.description()},V.forEach((i=>{t[i.name()]={version:i.version,enable:e.commandUse(i),description:i.description()}})),console.table(t)}else N.help()})),N.command("set").option("-n, --name <name>","see and set [name]","all").option("-t, --target <status>","set [target] to [status]","on").description("change subcommand use status").action((e=>{const t=new q;t.transConfig(e.name,e.target),t.loadConfig(N)})),(new q).loadConfig(N),N.parse(process.argv);
