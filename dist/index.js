#!/usr/bin/env node
import e from"process";import{exec as t,execSync as n}from"child_process";import a from"axios";import i from"chalk";import{Command as o}from"commander";import s from"inquirer";import r from"ora";import{resolve as c}from"path";import l from"app-root-path";import p from"fs-extra";import u from"yamljs";import m from"node:fs";import*as d from"toml";function f(){if(l.path.endsWith("dist"))return l.resolve("../");const e=c(l.path,"node_modules","@btmuli","mucli");return p.existsSync(e)?e:l.path}function g(){const e=c(f(),"package.json");return p.readJSONSync(e)}function y(e){return g().subVersion[e]}function h(e=!1){const t=c(f(),"config"),n=c(t,"default.yml");if(e)return n;const a=u.load(n).update,i=c(t,"user.yml");p.existsSync(i)||p.copyFileSync(n,i);return u.load(i).update<a&&p.copyFileSync(n,i),i}function w(e=!1){const t=h(e);return u.load(t)}function b(){const e=w(),t=[];return e.dev.enable&&t.push("dev"),e.git.enable&&t.push("git"),e.mmd.enable&&t.push("mmd"),e.pip.enable&&t.push("pip"),e.rs.enable&&t.push("rs"),t}const v=new o,$=g().version;v.name("muc").description(g().description).version($,"-v, --version"),v.command("set").description("set subcommand on or off").action((async()=>{const e=b(),t=["dev","git","mmd","pip","rs"].map((t=>e.includes(t)?{name:t,value:t,checked:!0}:{name:t,value:t,checked:!1}));await s.prompt([{type:"checkbox",name:"command",message:"Please select the subcommand you want to open",choices:t}]).then((async e=>{!function(e){const t=w();t.dev.enable=e.includes("dev"),t.git.enable=e.includes("git"),t.mmd.enable=e.includes("mmd"),t.pip.enable=e.includes("pip"),t.rs.enable=e.includes("rs");const n=h();p.writeFileSync(n,u.stringify(t,4,2))}(e.command)}))})),v.command("update").description("check and update from upstream").action((async()=>{const e=r("Checking update...").start(),n=(await a.get("https://registry.npmjs.org/@btmuli/mucli")).data["dist-tags"].latest;if($<n){e.stop();if(!0===(await s.prompt([{type:"confirm",name:"update",message:`There is a new version ${i.blue(n)}, update?`,default:!0}])).update){const e=r("Updating...").start();t("npm i -g @btmuli/mucli",((t,n,a)=>{let o="";null!==t&&(o=t.message),null!==a&&""!==a&&(o=""===o?a:`${o}\n${a}`),""!==o?(o=`Updated failed\n${i.red(o,n)}`,e.fail(o)):(o="Updated successfully",e.succeed(o)),e.stop()}))}}else e.succeed("MuCli is latest!")})),v.command("test [url]").option("-t, --timeout <timeout>","set the timeout of request","10").description("test the time to request the site").action((async(e,t)=>{let n,o=e;n=void 0!==t.timeout?parseInt(t.timeout):10,n=isNaN(n)?10:n,void 0===o&&(o="https://www.github.com");const s=`Testing Website Response Time for ${i.blue(o)}`,c=r(`${s} 0.00/${n}`).start();let l="0.00";const p=setInterval((()=>{l=(parseFloat(l)+.1).toFixed(1),c.text=`${s} ${l}/${n}`}),100);a.get(o,{timeout:1e3*n}).then((e=>{clearInterval(p),c.succeed(`Response Time: ${i.blue(e.headers["x-response-time"])}`)})).catch((e=>{clearInterval(p);const t=e.isAxiosError?e.message:JSON.stringify(e.toJSON());c.fail(`Request failed, cost time: ${i.red(l)}s\n${t}`)}))}));const S=new o("dev"),k=y("dev");function x(e,t,n){let a="git config --global";return a+=t?n?` https.proxy ${e}`:` http.proxy ${e}`:n?" --unset https.proxy":" --unset http.proxy",a}S.name("dev").description("A cli tool for devtools").version(k,"-sv, --subversion"),S.command("run [script]").description("run pnpm script").action((async e=>{let n="build";const a=function(){const e=g();return Object.keys(e.scripts)}();if(void 0!==e){if(!a.includes(e))return void r(`Scripts: ${i.blue(e)} not found`).fail();n=e}const o=`pnpm ${n}`,s=r(`Running scripts: ${i.blue(o)}`).start();t(`pnpm ${n}`,{cwd:f()},((e,t,n)=>{let a="";null!==e&&(a=e.message),null!==n&&""!==n&&(a=""===a?n:`${a}\n${n}`),""!==a?(a=`Scripts: ${i.blue(o)} run failed\n${i.red(a,t)}`,s.fail(a)):(a=`Scripts: ${i.blue(o)} successfully`,s.succeed(a)),s.stop()}))})),S.command("update").description("update config file").action((()=>{const e=h(!0),t=u.load(e);t.update=Math.floor(Date.now()/1e3),p.writeFileSync(e,u.stringify(t,4,2))}));const F=new o("git"),C=y("git");async function D(){switch((await s.prompt([{type:"list",name:"type",message:"What do you want to do about label?",choices:[{name:"See all labels",value:"see"},{name:"Create a new label",value:"create"},{name:"Update a label",value:"update"},{name:"Delete label(s)",value:"delete"},{name:"Do nothing",value:"nothing"}]}])).type){case"see":await async function(){const e=w(),t=e.mmd.defaultLabel;console.log(i.green("Default label:"),A(t));const n=e.mmd.labels;if(console.log(i.green("Custom labels:")),0===n.length)return void console.log(i.yellow("\tNo custom labels"));for(const e of n)console.log("\t",A(e))}();break;case"create":await M();break;case"update":await E();break;case"delete":await async function(){const e=w().mmd.labels;if(0===e.length)return void r("No custom labels").fail();const t=e.map((e=>({name:e.filename,value:e.filename,checked:!1}))),n=await s.prompt([{type:"checkbox",name:"filename",message:"Which label(s) do you want to delete ?",choices:t}]);if(!1===(await s.prompt([{type:"confirm",name:"confirm",message:"Are you sure to delete these labels ?"}])).confirm)return;const a=[];e.forEach((e=>{!1===n.filename.includes(e.filename)&&a.push(e)}));const i=w();i.mmd.labels=a,p.writeFileSync(h(),u.stringify(i,4,2)),r("Delete successfully").succeed()}()}}function A(e){return`[filename] ${i.yellow(e.filename)} [author] ${i.yellow(e.author)} [description] ${i.yellow(e.description)}`}async function M(e){const t=w(),n=t.mmd.labels,a=t.mmd.defaultLabel,i=await s.prompt([{type:"input",name:"filename",message:"Filename:",default:e??""}]);if(i.filename===a.filename||n.some((e=>e.filename===i.filename))){i.filename===a.filename&&r("The label is already exists as the default label!").fail();const e=n.find((e=>e.filename===i.filename));if(void 0===e)return;if(!1===(await s.prompt([{type:"confirm",name:"confirm",message:`The label already exists, do you want to update the label ?\n${A(e)}`}])).confirm)return;await E(i.filename)}else{const e=await s.prompt([{type:"input",name:"author",message:"Author:",default:a.author},{type:"input",name:"description",message:"Description:",default:a.description}]),o={filename:i.filename,author:e.author,description:e.description};if(!1===(await s.prompt([{type:"confirm",name:"confirm",message:`Do you want to create the label ?\n${A(o)}`}])).confirm)return;n.push(o),t.mmd.labels=n,p.writeFileSync(h(),u.stringify(t,4,2))}}async function E(e,t=!1){const n=await s.prompt([{type:"input",name:"input",message:"Please input the filename of the label you want to update:",default:e??""}]),a=w().mmd.labels,i=a.find((e=>e.filename=n.input));if(0===a.length||void 0===i){if(!1===(await s.prompt([{type:"confirm",name:"confirm",message:"The label is not exist yet, create a new ?",default:!0}])).confirm)return;await M(n.input)}else{const e=await s.prompt([{type:"input",name:"author",message:"Author: ",default:i.author},{type:"input",name:"description",message:"Description: ",default:i.description}]),t={filename:n.input,author:e.author,description:e.description};if(!(await s.prompt([{type:"confirm",name:"confirm",message:`Are you sure to update ?\n\tOld: ${A(i)}\n\tNew:${A(t)}`}])).confirm)return;a.forEach((e=>{e.filename===n.input&&(e=t)}));const o=w();o.mmd.labels=a,p.writeFileSync(h(),u.stringify(o,4,2))}}function T(e){const t=new Date,n=t.getFullYear().toString().padStart(4,"0"),a=(t.getMonth()+1).toString().padStart(2,"0"),i=t.getDate().toString().padStart(2,"0"),o=t.getHours().toString().padStart(2,"0"),s=t.getMinutes().toString().padStart(2,"0"),r=t.getSeconds().toString().padStart(2,"0");return!0===e?`${n}-${a}-${i} ${o}:${s}:${r}`:`${n}-${a}-${i}`}function j(e){let t="./README.md";return void 0!==e&&(t=e.endsWith(".md")?e:`${e}.md`),t}function N(e){let t;return t=e.includes("\\")?e.split("\\").pop():e.includes("/")?e.split("/").pop():e,void 0===t&&(t="README"),t.endsWith(".md")&&(t=t.split(".md")[0]),t}function R(e,t,n){let a=0;const i=c(f(),"template","MuCli","README.md"),o=p.readFileSync(i,"utf-8"),s=T(!1),r=T(!0),l=o.split("\n");if(l.forEach(((a,i)=>{let o;if(1===i&&(o=a.replace("author",e),l[i]=o),2===i&&(o=a.replace("description",t),l[i]=o),4===i&&(o=a.replace("update",s),l[i]=o),9===i&&(o=a.replace("modify",r),l[i]=o),7===i&&(o=void 0!==n?.create?a.replace("create",n.create):a.replace("create",r),l[i]=o),3===i){if(void 0!==n?.create){const e=n.create.split(" ")[0];o=a.replace("date",e)}else o=a.replace("date",s);l[i]=o}})),void 0!==n?.raw){const e=["author","description","date","update"];let t=5;for(const i in n.raw)e.includes(i.toLowerCase())||(l.splice(t,0,`${i}: ${n.raw[i]}`),a+=1,t+=1)}return[l.join("\n"),a]}function U(e){let t;if(void 0===e)t="README.md";else if(e.includes(".")){if("md"!==e.split(".").pop())return!1;t=e}else t=`${e}.md`;if(!p.existsSync(t))return!1;const n=p.readFileSync(t,"utf-8"),a=n.match(/^---(\r\n|\n)(.*?)(\r\n|\n)---(\r\n|\n)/gs);if(null===a)return!1;const i=a[0],o=n.replace(i,""),s={author:"",description:"",date:"",update:"",create:"",modify:""},r=function(e){const t={};return e.split(/(\r\n|\n)/).forEach((e=>{if("---"===e||""===e)return;if(!e.includes(":"))return;if(e.startsWith("---"))return;const n=e.split(":")[0].trim();t[n]=e.split(":")[1].trim()})),t}(i);if(void 0===r)return!1;for(const e in r)if("Author"!==e&&"author"!==e||(s.author=r[e]),"Description"!==e&&"description"!==e||(s.description=r[e]),"Date"!==e&&"date"!==e||(s.date=r[e]),"Update"!==e&&"update"!==e||(s.update=r[e]),""!==s.author&&""!==s.description&&""!==s.date&&""!==s.update)break;const c=o.match(/生成于 `(.*)`/g);return s.create=null!==c?c[0].split("`")[1]:W(p.statSync(t).birthtime),{fm:s,raw:r}}function W(e){return`${e.getFullYear()}-${(e.getMonth()+1).toString().padStart(2,"0")}-${e.getDate().toString().padStart(2,"0")} ${e.getHours().toString().padStart(2,"0")}:${e.getMinutes().toString().padStart(2,"0")}:${e.getSeconds().toString().padStart(2,"0")}`}async function I(e){const t=N(e),n=await s.prompt([{type:"input",name:"title",message:"Title:",default:t}]);""===n.title&&(n.title=t);const a=function(e){const t=w().mmd,n=t.defaultLabel;let a=t.labels.find((t=>t.filename===e));return void 0===a&&(a=n),a}(n.title),i=await s.prompt([{type:"input",name:"author",message:"Author:",default:a.author},{type:"input",name:"description",message:"Description:",default:a.description}]);return{filename:n.title,author:i.author,description:i.description}}async function O(e){const t=N(e);if(p.existsSync(e)){const n=U(e),a=[{name:"Create new file",value:"create"}];!1!==n?a.unshift({name:"Update frontmatter",value:"update"}):a.unshift({name:"Insert frontmatter",value:"insert"});switch((await s.prompt([{type:"list",name:"action",message:`File ${i.yellow(t)} already exists, what do you want to do?`,choices:a,default:!1===n?"insert":"update"}])).action){case"update":return void await q(e);case"insert":return void await async function(e){const t=await I(e),n=r("Inserting frontmatter").start(),a=W(p.statSync(e).birthtime),i=R(t.author,t.description,{create:a}),o=p.readFileSync(e,"utf-8").split("\n");o.splice(0,0,...i[0].split("\n")),p.writeFileSync(e,o.join("\n")),n.succeed("Frontmatter inserted")}(e)}}const n=await I(e),a=r("Creating markdown file").start(),o=R(n.author,n.description);t!==n.filename&&(e=e.replace(t,n.filename)),p.createFileSync(e),p.writeFileSync(e,o[0]),a.succeed(`Markdown file ${i.yellow(n.filename)} created`)}async function q(e){const t=N(e),n=U(e);if(!1===n){!0===(await s.prompt([{type:"confirm",name:"create",message:`Frontmatter not found in ${i.yellow(t)}, create?`,default:!0}])).create&&await O(e)}else{if(!0===(await s.prompt([{type:"confirm",name:"update",message:`Frontmatter found in ${i.yellow(t)}, update?`,default:!0}])).update){const t=r("Updating frontmatter").start(),a=R(n.fm.author,n.fm.description,{create:n.fm.create,raw:n.raw}),i=p.readFileSync(e,"utf-8").split("\n");i.splice(0,11+a[1],...a[0].split("\n")),p.writeFileSync(e,i.join("\n")),t.succeed("Frontmatter updated")}}}F.name("git").description("A cli tool for git").version(C,"-sv, --subversion"),F.command("proxy").description("set git proxy").option("-u, --url <url>","The proxy URL").option("-t, --target <target>","The target proxy status of Git").action((async e=>{const t=void 0===e.target||"true"===e.target,a=e.url??"127.0.0.1:7890",i=[x(a,t,!0),x(a,t,!1)];for(const e of i)n(e);console.log(`success to ${t?"set":"unset"} git proxy`)}));const L=new o("mmd"),_=y("mmd");L.name("mmd").description("A cli tool for markdown").version(_,"-sv, --subversion"),L.command("label").description("label crud").action((async()=>{await D()})),L.command("new [name]").description("create markdown file").action((async e=>{const t=j(e);await O(t)})),L.command("update [name]").description("update markdown frontmatter").action((async e=>{const t=j(e);await q(t)}));const J=new o("pip"),P=y("pip");async function H(e){const t="https://crates.io/api/v1/crates/"+e,n=g().version;await new Promise((e=>setTimeout(e,1e3)));const a=await(await fetch(t,{headers:{"User-Agent":`MuCli/${n}(BTMuli bt-muli@outlook.com)`}})).json();return[a.crate.max_stable_version,a.crate.max_version]}J.name("pip").description("A cli tool for pip").version(P,"-sv, --subversion"),J.command("mirror").description("mirror crud").action((async()=>{console.log("mirror")})),J.command("install [pkg]").description("install package").action((async e=>{if(void 0===e)return void console.log("search requirements.txt");t(`pip install ${e} -i https://pypi.tuna.tsinghua.edu.cn/simple`,((e,t,n)=>{null==e?console.log(t):console.log(e)}))}));const Y=new o("rs"),B=y("rs");Y.name("rs").description("A cli tool for rs").version(B,"-sv, --subversion"),Y.command("update").description("update package").option("-p, --package <package>","package name").action((async e=>{const t=await async function(){let e=`${process.cwd()}/Cargo.toml`;if(m.existsSync(e)||(e=`${process.cwd()}/src/Cargo.toml`),m.existsSync(e)||(e=`${process.cwd()}/src-tauri/Cargo.toml`),!m.existsSync(e))return!1;try{const t=m.readFileSync(e,"utf-8"),n=d.parse(t)?.dependencies;if(void 0===n)return!1;for(const e in n)"object"==typeof n[e]&&(n[e]=n[e].version);return n}catch(e){return!1}}();if(!1===t)return void console.log("No Cargo.toml file found or parse failed");if(void 0!==e.package){if(Object.keys(t).includes(e.package)){const n=r(`Checking dependency ${e.package}`).start(),a=await H(e.package);n.succeed(`Check dependency ${e.package} success`),console.table({name:e.package,version:t[e.package],stable:a[0],latest:a[1]})}else console.log(`The package ${e.package} is not in the dependencies`);return}const n=[],a=r("Checking dependencies").start();for(const e in t){a.text=`Checking ${e}`;const i=await H(e);n.push({name:e,version:t[e],stable:i[0],latest:i[1]})}a.succeed("Check dependencies success"),console.table(n)})),function(e,t){const n=b();for(const a of t)n.includes(a.name())&&e.addCommand(a)}(v,[L,F,S,J,Y]),v.parse(e.argv);
