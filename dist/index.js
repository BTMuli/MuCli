#!/usr/bin/env node
import{Command as e}from"commander";import{exec as t,execFile as o}from"child_process";import n from"axios";import i from"inquirer";import{dirname as a,join as s,resolve as r}from"path";import{readFileSync as l,existsSync as c,mkdirSync as m,writeFile as p,rename as h,stat as d,readFile as u}from"fs";import{fileURLToPath as g}from"url";import f from"yamljs";import{promisify as y}from"util";import{format as w}from"silly-datetime";import{platform as b}from"os";const v=a(a(g(import.meta.url))),C=JSON.parse(l(s(v,"package.json")).toString());class ${createDir(e){return!!c(e)||(this.createDir(a(e))?(m(e),!0):void 0)}createFile(e,t){try{if(-1!==e.indexOf("/")){const t=e.split("/").pop(),o=e.length-t.length,n=e.substring(0,o);this.createDir(n)}p(e,t,(t=>{t?console.log(`\n文件 ${e} 创建失败！\n${t}`):console.log(`\n文件 ${e} 创建成功！`)}))}catch(t){console.log(`\n文件 ${e} 创建失败！\n${t}`)}}updateFile(e,t){p(`${e}.new`,t,(t=>{t?console.log(`\n文件 ${e} 覆写失败！\n${t}`):(h(`${e}.new`,e,(t=>{t&&console.log(`\n文件 ${e} 覆写失败！\n${t}`)})),console.log(`文件 ${e} 覆写成功！`))}))}async fileExist(e){try{return(await y(d)(e)).isFile()}catch(e){return!1}}async readLine(e,t){try{const o=await y(u)(e,"utf-8"),n=-1!==o.indexOf("\r\n")?"\r\n":"\n",i=o.split(n),a=i.length;return i.slice(0,t>a?a:t)}catch(t){console.log(`\n文件 ${e} 读取失败！\n${t}`)}}async insertLine(e,t,o){try{const n=await y(u)(e,"utf-8"),i=-1!==n.indexOf("\r\n")?"\r\n":"\n",a=n.split(i);return a.length>=t?(a.splice(t,0,o+i),this.updateFile(e,a.join(i)),!0):(console.log(`\n文件 ${e} 行数不足！`),!1)}catch(t){return console.log(`\n文件 ${e} 插入失败！\n${t}`),!1}}async updateLine(e,t,o){try{const n=await y(u)(e,"utf-8"),i=-1!==n.indexOf("\r\n")?"\r\n":"\n",a=n.split(i);return a.length>=t?(a.splice(0,t,o),this.updateFile(e,a.join(i)),!0):(console.log(`\n文件 ${e} 行数不足！`),!1)}catch(t){return console.log(`\n文件 ${e} 覆盖失败！\n${t}`),!1}}}class k{constructor(e){this.fileTool=new $,this.defaultPath="\\config_default\\config.yml",void 0===e&&(e=this.defaultPath),this.yamlPath=v+e}readYaml(e){return void 0===e&&(e=this.yamlPath),f.load(e)}readYamlDetail(e,t){let o=e;return t.map((e=>{o=o[e]})),o}changeYaml(e,t,o){let n=e;return t.map(((e,i)=>{i===t.length-1?n[e]=o:n=n[e]})),e}saveYaml(e,t){void 0===t&&(t=this.yamlPath),this.fileTool.updateFile(t,f.stringify(e,4))}}class M{constructor(e){this.yamlTool=new k(e),this.defaultPath=this.yamlTool.defaultPath,void 0===e&&(e=this.defaultPath),this.configPath=v+e,this.backupPath=this.configPath.replace("yml","yml.bak")}readConfig(e){return void 0===e&&(e=this.configPath),this.yamlTool.readYaml(e)}readConfigDetail(e,t){return this.yamlTool.readYamlDetail(e,t)}changeConfig(e,t,o){return this.yamlTool.changeYaml(e,t,o)}saveConfig(e,t){void 0===t&&(t=this.configPath),this.yamlTool.saveYaml(e,t)}backupConfig(){const e=this.readConfig(this.configPath);this.saveConfig(e,this.backupPath)}}class T{constructor(e,t,o){this.author="BTMuli<bt-muli@outlook.com>",this.name=e,this.command=t,this.description=o}transCommand(e){return e[0].toUpperCase()+e.slice(1).toLowerCase()}getFilesPath(){const e=this.command+".ts";return{cliPath:`${v}\\src\\cli\\${e}`,configPath:`${v}\\src\\config\\${e}`,interPath:`${v}\\src\\interface\\${e}`,modelPath:`${v}\\src\\model\\${e}`,utilsPath:`${v}\\src\\utils\\${e}`}}getFileHeader(){return`/**\r\n * @author ${this.author}\r\n * @description ${this.description}\r\n * @version 0.0.1\r\n */\r\n\r\n`}getCliContent(){const e=this.command,t=this.transCommand(this.name);return this.getFileHeader()+'/* Node */\r\nimport { Command } from "commander";\r\n/* MuCli */\r\n// import '+t+' from "../utils/'+e+'";\r\nimport { PROJECT_INFO } from "../index";\r\n\r\n/* 版本管理 */\r\nconst '+t+'Version: string = PROJECT_INFO["subversion"]["'+this.command+'"];\r\n\r\nconst '+this.name+": Command = new Command();\r\n\r\n/* 基本信息 */\r\n"+this.name+'.name("'+this.command+'")\r\n\t.description("'+this.description+'")\r\n\t.version(\r\n\t\t'+t+'Version,\r\n\t\t"-sv, --subversion",\r\n\t\t"output the subversion of MuCli-'+t+'"\r\n\t);\r\n\r\nexport default '+this.name+";\r\n"}getConfigContent(){const e=this.transCommand(this.name);return this.getFileHeader()+'/* MuCli Base */\r\nimport ConfigBase from "../base/config";\r\n/* MuCli Interface */\r\n'+`// import { Config } from "../interface/${this.command}";\r\n// import { Config as ConfigMuc } from "../interface/muc";\r\n\r\n`+`class Config${e} extends ConfigBase {\r\n}\r\n\r\n`+`export default Config${e};\r\n`}getInterContent(){return`/**\r\n * @author ${this.author}\r\n * @description ${this.command} 涉及到的 interface\r\n * @version 0.0.1\r\n */\r\n\r\nimport { Config as ConfigBase } from "./index";\r\n\r\n/**\r\n * @description 配置文件对应的 interface\r\n * @version 0.0.1\r\n * @interface Config\r\n * @property {string} name command 名称\r\n * @property {boolean} enable 是否启用\r\n * @return {Config} 配置文件对应的 interface\r\n */\r\nexport interface Config extends ConfigBase {\r\n\tname: string;\r\n\tenable: boolean;\r\n}\r\n`}getModelContent(){const e=this.transCommand(this.name);return this.getFileHeader()+"class "+e+"Model {}\r\n\r\nexport default "+e+"Model;\r\n"}getUtilsContent(){const e=this.command+".ts",t=this.transCommand(this.name);return this.getFileHeader()+'/* Node */\r\n// import inquirer from "inquirer";\r\n/* MuCli */\r\n// import MucFile from "./file";\r\n// import '+t+'Model from "../config/'+e+'";\r\n\r\nclass '+t+" {}\r\n\r\nexport default "+t+";\r\n"}}class L{updatePackage(e,t){const o=C;"all"===e?o.version=t:o.subversion[e]=t,(new $).updateFile(`${v}\\package.json`,JSON.stringify(o,null,4))}createNew(e){const t=new $;i.prompt([{type:"input",message:"请输入子命令名称",name:"name",default:e||"test"},{type:"input",message:"请输入子命令",name:"command",default:e||"test"},{type:"input",message:"请输入子命令描述",name:"description",default:`A SubCommand within MuCli for ${e||"test"}`}]).then((async e=>{const o=new T(e.name,e.command,e.description),n=o.getFilesPath();i.prompt([{type:"checkbox",name:"files",message:"请选择要创建的文件",choices:[{name:"cli",value:"cli",checked:!0},{name:"config",value:"config",checked:!0},{name:"interface",value:"interface",checked:!0},{name:"model",value:"model",checked:!0},{name:"utils",value:"utils",checked:!0}]}]).then((async i=>{console.log("\n正在创建文件...\n"),i.files.map((e=>{switch(e){case"cli":t.updateFile(n.cliPath,o.getCliContent());break;case"config":t.updateFile(n.configPath,o.getConfigContent());break;case"interface":t.updateFile(n.interPath,o.getInterContent());break;case"model":t.updateFile(n.modelPath,o.getModelContent());break;case"utils":t.updateFile(n.utilsPath,o.getUtilsContent())}})),this.updatePackage(e.command,"0.0.1"),await new Promise((()=>{setTimeout((()=>{console.log("\n文件创建成功！\n")}),1e3)}))}))}))}getUpVersion(e){return[e.split(".").map(((e,t)=>2===t?Number(e)+1:e)).join("."),e.split(".").map(((e,t)=>t>1?0:1===t?Number(e)+1:e)).join("."),e.split(".").map(((e,t)=>0===t?Number(e)+1:0)).join(".")].map((e=>({name:e,value:e})))}checkVersion(e,t){return/^(\d+\.){2}\d+$/.test(e)?!(e<t)||(console.log("新版本号不能小于当前版本号"),!1):(console.log("版本号格式不正确"),!1)}updateMucVersion(e){const o=C.version;this.checkVersion(e,o)&&(this.updatePackage("all",e),e!==o?(console.log(`\n版本号已更新 ${o} -> ${e}`),i.prompt([{type:"confirm",name:"install",message:"是否立即更新依赖？",default:!0,when:()=>new Promise((e=>{setTimeout((()=>{e(!0)}),1e3)}))}]).then((e=>{e.install?t("npm install",((e,t,o)=>{e?console.log(e):o?console.log(o):console.log(t)})):console.log("\n请手动执行 npm install 更新依赖\n")}))):console.log(`\n版本号未更新，当前 MuCli 版本为 ${o}\n`))}updateSubVersion(e,t){const o=C.subversion[e];this.checkVersion(t,o)&&(this.updatePackage(e,t),t!==o?console.log(`\n版本号已更新 ${o} -> ${t}\n`):console.log(`\n版本号未更新，当前 ${e} 版本为 ${o}\n`))}updateVersion(){const e=Object.keys(C.subversion).map((e=>({name:`${e}(${C.subversion[e]})`,value:[e,C.subversion[e]]})));i.prompt([{type:"list",message:"请选择要更新的命令",name:"command",choices:[{name:`muc(${C.version})`,value:["muc",C.version]},...e,{name:"不更新任何命令",value:["null"]}]}]).then((e=>{if("null"===e.command[0])return void console.log("\n未更新任何命令\n");const t=e.command[1];i.prompt([{type:"list",message:`请选择新的 ${e.command[0]} 版本号`,name:"version",choices:[...this.getUpVersion(t),{name:"手动输入",value:"input"},{name:"不更新",value:t}]},{type:"input",name:"input",message:`请输入新的 ${e.command[0]} 版本号:`,when:e=>"input"===e.version}]).then((t=>{const o="input"===t.version?t.input:t.version;"muc"===e.command[0]?this.updateMucVersion(o):this.updateSubVersion(e.command[0],o)}))}))}}const P=C.subversion.dev,x=new e;x.name("dev").description("A SubCommand within MuCli for SubCommand").version(P,"-sv, --subversion","output the subversion of MuCli-Dev"),x.command("new").option("-c, --command [command]","create a new command","test").action((e=>{(new L).createNew(e.command)})),x.command("update").description("update the version of a command").action((()=>{(new L).updateVersion()}));class I{constructor(e="",t=""){this.sign="---",this.lineBreak="win32"===process.platform?"\r\n":"\n",this.quote="> 本文档 [`Front-matter`](https://github.com/BTMuli/Mucli#FrontMatter) 由 [MuCli](https://github.com/BTMuli/Mucli) 自动生成于",this.author=e,this.description=t}getHeader(){const e=w(new Date,"YYYY-MM-DD");return this.sign+this.lineBreak+"Author: "+this.author+this.lineBreak+"Date: "+e+this.lineBreak+"Description: "+this.description+this.lineBreak+"Update: "+e+this.lineBreak+this.sign+this.lineBreak+this.lineBreak+this.quote+"`"+w(new Date,"YYYY-MM-DD HH:mm:ss")+"`"+this.lineBreak+"> "+this.lineBreak+"> 更新于 `"+w(new Date,"YYYY-MM-DD HH:mm:ss")+"`"}async readHeader(e){const t=await(new $).readLine(e,10),o={header:{author:"",date:"",description:"",update:""},quote:{date:t[7].split("`")[3],update:t[9].split("`")[1]}};return t.forEach((e=>{e.includes("Author")&&(o.header.author=e.split(":")[1].trim()),e.includes("Date")&&(o.header.date=e.split(":")[1].trim()),e.includes("Description")&&(o.header.description=e.split(":")[1].trim()),e.includes("Update")&&(o.header.update=e.split(":")[1].trim())})),o}async updateHeader(e){const t=await this.readHeader(e);return t.header.update=w(new Date,"YYYY-MM-DD"),t.quote.update=w(new Date,"YYYY-MM-DD HH:mm:ss"),t}async writeHeader(e){const t=await this.updateHeader(e);return this.sign+this.lineBreak+"Author: "+t.header.author+this.lineBreak+"Date: "+t.header.date+this.lineBreak+"Description: "+t.header.description+this.lineBreak+"Update: "+t.header.update+this.lineBreak+this.sign+this.lineBreak+this.lineBreak+this.quote+"`"+t.quote.date+"`"+this.lineBreak+"> "+this.lineBreak+"> 更新于 `"+t.quote.update+"`"}}class F extends M{constructor(){super();const e=this.readConfig().mmd;this.label=e.label}saveMmdConfig(e){let t=JSON.parse(JSON.stringify(this.readConfig()));t=this.changeConfig(t,["mmd","label"],e),this.saveConfig(t)}}class D{constructor(){const e=(new F).readConfig().mmd;this.config=new F,this.label=e.label,this.file=this.config.yamlTool.fileTool}checkLabel(e){const t=this.label.custom,o={filename:e,author:void 0,description:e};return e===this.label.default.filename?this.label.default:(null===t||t.map((t=>{if(t.filename===e)return t})),o)}addLabel(e){void 0===this.checkLabel(e).author?i.prompt([{type:"input",name:"author",message:"请输入作者",default:this.label.default.author},{type:"input",name:"description",message:"请输入描述",default:this.label.default.description}]).then((t=>{const o={author:t.author,description:t.description,filename:e};console.log(o),i.prompt([{type:"confirm",name:"create",message:`是否创建 Label ${e}`,default:!1}]).then((e=>{if(e.create){let e=this.label.custom;null==e&&(e=[]),e.push(o),this.label.custom=e,this.config.saveMmdConfig(this.label)}}))})):console.log(`Label ${e} 已存在`)}getLabel(e="all"){const t=this.label;if("all"===e){let e=[];e.push(t.default),void 0!==t.custom&&null!==t.custom&&(e=e.concat(t.custom)),console.table(e)}else{const t=this.checkLabel(e);void 0!==t.author?console.table(t):i.prompt([{type:"confirm",name:"create",message:`Label ${e} 不存在，是否创建？`,default:!1}]).then((t=>{t.create&&this.addLabel(e)}))}}delLabel(e){void 0!==this.checkLabel(e).author?i.prompt([{type:"confirm",name:"delete",message:`是否删除 Label ${e}`,default:!1}]).then((t=>{if(t.delete){let t=this.label.custom;t=t.filter((t=>t.filename!==e)),this.label.custom=t,this.config.saveMmdConfig(this.label)}})):console.log(`Label ${e} 不存在`)}operaLabel(){i.prompt([{type:"list",name:"label",message:"请选择要进行的操作",choices:[{name:"查看所有 Label",value:"get"},{name:"查询 Label",value:"check"},{name:"创建 Label",value:"add"},{name:"删除 Label",value:"del"},{name:"查看 muc mmd label 命令说明",value:"help"},{name:"退出",value:"exit"}]}]).then((e=>{"exit"!==e.label&&("help"!==e.label?"get"!==e.label?i.prompt([{type:"input",name:"fileName",message:"请输入要查询的 Label",when:"check"===e.label},{type:"input",name:"fileName",message:"请输入要创建的 Label",when:"add"===e.label},{type:"input",name:"fileName",message:"请输入要删除的 Label"}]).then((t=>{if(""!==t.fileName)switch(e.label){case"check":this.getLabel(t.fileName);break;case"add":this.addLabel(t.fileName);break;case"del":this.delLabel(t.fileName)}else console.log("输入不能为空")})):this.getLabel("all"):t("muc mmd typora -h",((e,t,o)=>{e?console.log(e):o?console.log(o):t&&console.log(t)})))}))}async checkHeader(e){const t=await this.file.readLine(e,10);return!(10!==t.length||"---"!==t[0])}handleFilePath(e){let t;if(t=e.includes("\\")?e.split("\\").pop():e.split("/").pop(),t.includes(".")){if(!t.endsWith(".md"))return void console.log("\n文件名不合法，文件名应以 .md 结尾");t=t.replace(".md","")}else e+=".md";return[e,t]}async createFile(e,t,o){let n;n=e.includes("\\")?e.split("\\").pop():e.split("/").pop();const a=new I(t,o);if(await this.file.fileExist(e)){const t=await this.checkHeader(e);i.prompt([{type:"list",name:"action",message:`文件 ${n} 已存在，未检测到文件头，执行以下操作：`,choices:[{name:"覆盖",value:"cover"},{name:"插入文件头",value:"insert"}],when:!t,default:"insert"},{type:"list",name:"action",message:`文件 ${n} 已存在，检测到文件头，执行以下操作：`,choices:[{name:"覆盖",value:"cover"},{name:"更新文件头",value:"update"},{name:"不执行任何操作",value:"none"}],when:t,default:"none"}]).then((async t=>{switch(t.action){case"cover":this.file.updateFile(e,a.getHeader());break;case"insert":await this.file.insertLine(e,0,a.getHeader());break;case"update":await this.file.updateLine(e,0,await a.writeHeader(n))}}))}else this.file.createFile(e,a.getHeader())}promptCreateFile(e){const t=this.handleFilePath(e);e=t[0];const o=t[1],n=this.checkLabel(o);i.prompt([{type:"input",name:"title",message:"请输入文件名称",default:o},{type:"input",name:"author",message:"请输入作者",default:n.author||this.label.default.author},{type:"input",name:"description",message:"请输入描述",default:n.description}]).then((async t=>{const n=t.title,i=e.replace(o,n);await this.createFile(i,t.author,t.description)}))}async promptUpdateFile(e){const t=this.handleFilePath(e);e=t[0];const o=t[1];if(await this.file.fileExist(e)){const t=await this.checkHeader(e);i.prompt([{type:"confirm",name:"insert",message:`文件 ${o} 未检测到文件头，是否插入文件头？`,when:!t,default:!0},{type:"confirm",name:"update",message:`文件 ${o} 已存在，是否更新文件头？`,when:t,default:!0}]).then((async t=>{if(t.insert){const t=this.checkLabel(o);await i.prompt([{type:"input",name:"author",message:"请输入作者",default:t.author},{type:"input",name:"description",message:"请输入描述",default:t.description}]).then((async t=>{const o=new I(t.author,t.description);await this.file.insertLine(e,0,o.getHeader())}))}else if(t.update){const t=new I;await this.file.updateLine(e,10,await t.writeHeader(e))}}))}else i.prompt([{type:"confirm",name:"create",message:`文件 ${o} 不存在，是否创建文件？`,default:!1}]).then((async t=>{t.create&&await this.promptCreateFile(e)}))}}const B=C.subversion.mmd,E=new e;E.name("mmd").description("A SubCommand within MuCli for Markdown").version(B,"-sv, --subversion","output the subversion of MuCli-Markdown"),E.command("new").option("-n, --name <name>","the name of the new markdown file","README").description("create a markdown file").action((e=>{(new D).promptCreateFile(e.name)})),E.command("update").option("-n, --name <name>","the name of the markdown file","README.md").description("update the header of the markdown file").action((async e=>{const t=new D;await t.promptUpdateFile(e.name)})),E.command("label").option("-l, --list","get the list of markdown label").description("get the list of markdown label").option("-g, --get <name>","get the markdown label").description("get the template").option("-d, --delete <name>","delete the markdown label").description("delete the template").option("-a, --add <name>","add the markdown label").description("add the template").action((e=>{const t=new D;e.list?t.getLabel("all"):e.get?t.getLabel(e.get):e.delete?t.delLabel(e.delete):e.add?t.addLabel(e.add):t.operaLabel()}));class Y{constructor(e){this.name=e.name,this.url=e.url,void 0!==e.usable?this.usable=e.usable:this.usable=!1}async verifyMirror(e){let t;void 0===e&&(e=this.url);try{const o=(new Date).getTime();await n.get(e,{timeout:5e3});t=(new Date).getTime()-o}catch(e){t=-1}return t}outputMirrorInfo(){console.log(`镜像名称：${this.name}，镜像地址：${this.url}，是否可用：${this.usable}`)}}class N{constructor(e){this.current=e.current,this.list=e.list}getConfig(){return{current:this.current,list:this.list}}getMirrorList(){return this.list.map((e=>new Y(e)))}getMirrorUse(){return this.list.find((e=>{if(e.name.toString()===this.current)return e}))}outputMirrorList(){const e=[];this.getMirrorList().forEach((t=>{e.push({"镜像名称":t.name,"镜像地址":t.url,"是否可用":t.usable?"可用":"不可用"})})),console.table(e,["镜像名称","镜像地址","是否可用"])}mirrorExist(e){for(let t=0;t<this.list.length;t++)if(this.list[t].name.toString()===e.toString())return this.list[t];return!1}setMirrorUse(e){!1!==this.mirrorExist(e)?(this.current=e,console.log(`当前使用的镜像已设置为：${e}`)):console.log(`镜像 ${e} 不存在`)}async addMirror(e,t){if(!1!==this.mirrorExist(e))return void console.log(`镜像 ${e} 已存在`);const o=new Y({name:e,url:t,usable:void 0,time:void 0}),n=await o.verifyMirror();-1===n||n>=2e3?console.log(`镜像 ${e} 不可用`):(this.list.push({name:e,url:t,usable:!0,time:void 0}),console.log(`镜像 ${e} 已添加，耗时 ${n} ms`))}deleteMirror(e){!1!==this.mirrorExist(e)?(this.list.splice(this.list.findIndex((t=>t.name===e),1)),console.log(`镜像 ${e} 已删除`)):console.log(`镜像 ${e} 不存在`)}async updateMirror(e,t){if(!1===this.mirrorExist(e))return void console.log(`镜像 ${e} 不存在`);const o=new Y({name:e,url:t,usable:void 0,time:void 0}),n=await o.verifyMirror();if(-1===n||n>=2e3)return void console.log(`镜像 ${e} 不可用`);const i=this.list.find((t=>t.name===e));i.url=t,i.usable=!0,console.log(`镜像 ${e} 已更新，耗时 ${n} ms`)}async testMirror(e){const t=new Y(e),o=await t.verifyMirror();return-1===o||o>=5e3?(console.log(`镜像 ${e.name.toString()} 不可用`),-1):(console.log(`镜像 ${e.name.toString()} 可用，耗时 ${o} ms`),o)}}class q extends M{constructor(){super();const e=this.readConfig().pip;this.mirror=e.mirror}saveMirrorConfig(e){let t=JSON.parse(JSON.stringify(this.readConfig()));t=this.changeConfig(t,["pip","mirror"],e),this.saveConfig(t)}}class H{constructor(){this.config=new q,this.mirrorInfo=new N(this.config.mirror)}install(e){const o=this.mirrorInfo.getMirrorUse().url;let n="",a=process.env.VIRTUAL_ENV;void 0!==a?a+="\\Scripts\\pip.exe":a="pip",i.prompt([{type:"input",name:"package",message:"请输入包名：",when:void 0!==e.package,default:e.package},{type:"input",name:"requirement",message:"请输入 requirements.txt 文件路径：",when:void 0!==e.requirement,default:"requirements.txt"},{type:"list",name:"operate",message:"请选择操作：",choices:[{name:"安装包",value:"package"},{name:"安装 requirements.txt 文件",value:"requirement"}],when:void 0===e.package&&void 0===e.requirement}]).then((async e=>{if(e.package)n=`${a} install ${e.package} -i ${o}`;else if(e.requirement){if(!await(new $).fileExist("requirements.txt"))return void console.log("requirements.txt 文件不存在");n=`${a} install -r ${e.requirement} -i ${o}`}else e.operate&&("package"===e.operate?this.install({package:!0,requirement:void 0}):"requirement"===e.operate&&this.install({package:void 0,requirement:!0}));""!==n&&(console.log(`执行命令：${n}`),t(n,((e,t,o)=>{e?console.log(e):(console.log(t),o&&console.log(o))})))}))}operaMirror(){i.prompt([{type:"list",name:"operate",message:"请选择操作：",choices:[{name:"查看镜像",value:"show"},{name:"设置当前使用镜像",value:"use"},{name:"添加镜像",value:"add"},{name:"删除镜像",value:"delete"},{name:"更新镜像",value:"update"},{name:"测试镜像",value:"test"},{name:"退出",value:"exit"}]}]).then((async e=>{if("show"===e.operate)this.showMirror();else if("use"===e.operate)await this.setMirrorUse();else if("add"===e.operate)await this.addMirror();else if("delete"===e.operate)await this.deleteMirror();else if("update"===e.operate)await this.updateMirror();else if("test"===e.operate)await this.verifyMirror();else if("exit"===e.operate)return}))}showMirror(){this.mirrorInfo.outputMirrorList()}async addMirror(e){let t=!1;if(void 0!==e&&(t=this.mirrorInfo.mirrorExist(e)),!1===t){const t=await i.prompt([{type:"input",name:"name",message:"请输入镜像源名称：",default:e},{type:"input",name:"url",message:"请输入镜像源地址："}]);await this.mirrorInfo.addMirror(t.name,t.url),this.config.saveMirrorConfig(this.mirrorInfo.getConfig()),setTimeout((()=>{console.log("更新配置文件成功！")}),1e3)}else console.log(`镜像源 ${e} 已存在！`)}async deleteMirror(e){const t=this.mirrorInfo.getMirrorList();i.prompt([{type:"list",name:"mirror",message:"请选择要删除的镜像源：",choices:t,default:e}]).then((async e=>{this.mirrorInfo.deleteMirror(e.mirror),this.config.saveMirrorConfig(this.mirrorInfo.getConfig()),setTimeout((()=>{console.log("更新配置文件成功！")}),1e3)}))}async getMirrorTest(){const e=this.mirrorInfo.getMirrorList();return i.prompt([{type:"list",name:"test",message:"请选择测试的对象：",choices:[{name:"全部镜像源",value:"all"},{name:"指定镜像源",value:"one"}]},{type:"list",name:"mirror",message:"请选择镜像源：",choices:e,when:e=>"one"===e.test}]).then((async e=>"all"===e.test?"all":"one"===e.test?e.mirror:void 0))}async verifyMirror(){const e=await this.getMirrorTest();if("all"!==e){const t=this.mirrorInfo.mirrorExist(e);if(!1===t)return void console.log(`镜像源 ${e} 不存在！`);this.mirrorInfo.testMirror(t).then((t=>{-1!==t?console.log(`镜像源 ${e} 可用，响应时间为 ${t}ms`):console.log(`镜像源 ${e} 不可用！`)}))}else{const e=this.mirrorInfo.list;Promise.all(e.map((async e=>{const t=this.mirrorInfo.testMirror(e);return e.usable=-1!==await t,e.time=await t,e}))).then((async()=>{const t=e.filter((e=>e.usable)),o=t.reduce(((e,t)=>e.time<t.time?e:t)),n=await e.find((e=>e.name===this.mirrorInfo.current));console.log(`\n测试镜像源数量：${e.length}，可用镜像源数量：${t.length}，最快镜像源为 ${o.name}，响应时间为 ${o.time}ms，当前使用镜像源为 ${n.name}。`),console.log(`\n当前使用镜像源：${n.name}，${n.url}，${-1===n.time?"不可用":"耗时："+n.time+"ms"}`),console.log(`\n最快镜像源：${o.name}，${o.url}，耗时：${o.time}ms\n`),o.name!==n.name&&(await i.prompt([{type:"confirm",name:"confirm",message:`是否切换到 ${o.name} 镜像源？`,default:!1}]).then((async e=>{e.confirm&&this.mirrorInfo.setMirrorUse(o.name)})),await i.prompt([{type:"confirm",name:"confirm",message:"是否更新配置文件？",default:!1}]).then((async t=>{t.confirm&&(e.map((async e=>{delete e.time})),this.mirrorInfo.list=e,this.config.saveMirrorConfig(this.mirrorInfo.getConfig()),setTimeout((()=>{console.log("更新配置文件成功！")}),1e3))})))}))}}async setMirrorUse(e){const t=this.mirrorInfo.getMirrorList();if(void 0!==e){if(!1===this.mirrorInfo.mirrorExist(e))return void console.log(`\n镜像源 ${e} 不存在！\n`)}i.prompt([{type:"list",name:"mirror",message:"请选择要使用的镜像源：",choices:t,default:e||this.mirrorInfo.current}]).then((async t=>{const o=this.mirrorInfo.mirrorExist(t.mirror);!1!==o?(this.mirrorInfo.setMirrorUse(o.name),this.config.saveMirrorConfig(this.mirrorInfo.getConfig()),setTimeout((()=>{console.log("更新配置文件成功！")}),1e3)):console.log(`\n镜像源 ${e} 不存在！\n`)}))}async updateMirror(e){const t=this.mirrorInfo.getMirrorList();if(void 0!==e){if(!1===this.mirrorInfo.mirrorExist(e))return void console.log(`\n镜像源 ${e} 不存在！\n`)}i.prompt([{type:"list",name:"mirror",message:"请选择要更新的镜像源：",choices:t,default:e||this.mirrorInfo.current}]).then((async e=>{i.prompt([{type:"input",name:"url",message:"请输入镜像源地址：",default:this.mirrorInfo.list.find((t=>t.name===e.mirror)).url}]).then((async t=>{await this.mirrorInfo.updateMirror(e.mirror,t.url),this.config.saveMirrorConfig(this.mirrorInfo.getConfig()),setTimeout((()=>{console.log("更新配置文件成功！")}),1e3)}))}))}}const S=C.subversion.pip,U=new e;U.name("pip").description("A SubCommand within MuCli for pip").version(S,"-sv, --subversion","output the subversion of MuCli-Pip"),U.command("install").description("install package").option("-p, --package [package]","install package").option("-r, --requirement [requirement]","install requirement").action((e=>{(new H).install(e)})),U.command("test").description("test mirror").action((async()=>{const e=new H;await e.verifyMirror()})),U.command("mirror").description("handle mirror").option("-a, --add [add]","add mirror").option("-d, --delete [delete]","delete mirror").option("-s, --set [set]","set mirror").option("-l, --list","list mirror").option("-u, --update","update mirror").action((async e=>{const t=new H;e.add?await t.addMirror(e.add):e.delete?await t.deleteMirror(e.delete):e.set?await t.setMirrorUse(e.set):e.update?await t.updateMirror(e.update):e.list?await t.showMirror():t.operaMirror()}));class O extends M{constructor(){super(),this.typora=this.readConfig().typora}saveTyporaConfig(e,t){let o=JSON.parse(JSON.stringify(this.readConfig()));o=this.changeConfig(o,["typora","enable"],e),o=this.changeConfig(o,["typora","path"],t),this.saveConfig(o)}}class V{constructor(){this.config=new O,this.system=b()}showConfig(){console.log("当前配置："),console.table([{system:this.system,enable:this.config.typora.enable,path:this.config.typora.path}])}setPath(e){this.showConfig(),i.prompt([{type:"input",name:"path",message:"请输入 Typora 的路径",default:e||this.config.typora.path}]).then((e=>{console.log("所输入的路径为：",e.path),console.log("尝试打开 Typora..."),o(e.path,((t,o,n)=>t?(console.log("error:",t),void console.log("打开 Typora 失败！")):n?(console.log("stderr:",n),void console.log("打开 Typora 失败！")):(console.log("stdout:",o),console.log("打开 Typora 成功！"),console.log("保存配置文件..."),this.config.saveTyporaConfig(!0,e.path),void console.log("保存配置文件成功！")))),this.showConfig()}))}findTypora(){t("REG QUERY 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Typora.exe'",((e,t,o)=>{if(e)return void console.log("error:",e);if(o)return void console.log("stderr:",o);-1!==t.indexOf("ERROR")&&i.prompt([{type:"confirm",name:"confirm",message:"未找到 Typora，是否手动输入 Typora 路径？",default:!0}]).then((e=>{e.confirm&&this.setPath()}));const n=t.split("REG_SZ")[1].trim();i.prompt([{type:"confirm",name:"path",message:`检测到本地 Typora 路径与配置文件不一致，是否更新配置文件？\n当前路径：${n}\n配置文件路径：${this.config.typora.path}`,default:!0,when:()=>n!==this.config.typora.path},{type:"confirm",name:"enable",message:`检测到本地 Typora 路径与配置文件一致，是否启用 Typora？\n当前路径：${n}\n配置文件路径：${this.config.typora.path}`,default:!0,when:()=>n===this.config.typora.path}]).then((e=>{e.path&&(console.log("保存配置文件..."),this.config.saveTyporaConfig(!0,n),console.log("保存配置文件成功！"),console.log("请使用 muc typora test 检查配置是否正确。")),e.enable&&(console.log("保存配置文件..."),this.config.saveTyporaConfig(!0,""),console.log("保存配置文件成功！"),console.log("请使用 muc typora test 检查配置是否正确。"))}))}))}initConfig(){i.prompt([{type:"list",name:"typora",message:"请选择你的 Typora 配置情况",choices:[{name:"非 Windows 系统，未安装 Typora",value:"none"},{name:"非 Windows 系统，已安装 Typora",value:"notWindows"},{name:"Windows 系统，未安装 Typora",value:"notInstall"},{name:"Windows 系统，已安装 Typora",value:"windows"}],default:"win32"===this.system?"notInstall":"notWindows"}]).then((e=>{switch(e.typora){case"none":this.config.saveTyporaConfig(!1,"");break;case"notWindows":i.prompt([{type:"confirm",name:"check",message:"本命令行工具不支持非 windows 系统下的 Typora,但是你可以手动配置 Typora 的路径,是否手动配置?",default:!1}]).then((e=>{e.check&&this.setPath()}));break;case"notInstall":i.prompt([{type:"confirm",name:"check",message:"本命令行建议使用 Typora 编辑器,是否安装 Typora?",default:!1}]).then((e=>{e.check?(console.log("请手动安装 Typora，官网地址：https://typora.io/"),console.log("安装完成后，重新运行本命令行工具")):this.config.saveTyporaConfig(!1,"")}));break;case"windows":i.prompt([{type:"confirm",name:"check",message:"本命令行建议使用 Typora 编辑器,是否使用 Typora?",default:!0}]).then((e=>{e.check&&this.findTypora()}))}}))}testConfig(){this.showConfig(),"win32"===this.system&&!1===this.config.typora.enable?i.prompt([{type:"confirm",name:"enable",message:"检测到当前系统为 Windows，是否启用 Typora？",default:!0}]).then((e=>{e.enable&&this.findTypora()})):"win32"!==this.system&&!0===this.config.typora.enable?i.prompt([{type:"confirm",name:"enable",message:"检测到当前系统非 Windows，建议关闭 Typora 配置,是否更新配置文件？",default:!0}]).then((e=>{e.enable&&this.config.saveTyporaConfig(!1,"")})):console.log("\n当前配置正确\n")}openFile(e){if(this.config.typora.enable){const t=r()+"\\"+e;o(this.config.typora.path,[t],((e,t,o)=>{e?console.error(`执行的错误: ${e}`):(console.log(`stdout: ${t}`),console.log(`stderr: ${o}`))}))}else i.prompt([{type:"confirm",name:"enable",message:"未启用 Typora，是否启用？",default:!0}]).then((e=>{e.enable&&this.testConfig()}))}}const A=C.subversion.typora,J=new e;J.name("typora").description("A SubCommand within MuCli for Typora").version(A,"-sv, --subversion","output the subversion of MuCli-Typora"),J.command("init").description("init the config of Typora").action((()=>{(new V).initConfig()})),J.command("open").option("-n, --name [name]","the name of the markdown file","./").description("open file with Typora").action((e=>{(new V).openFile(e.name)})),J.command("info").description("get local typora path").action((()=>{(new V).showConfig()})),J.command("set").option("-p, --path [path]","set the path of Typora").description("set the path of Typora").action((e=>{const t=new V;t.setPath(e.path),console.log("正在测试 Typora 的配置..."),t.testConfig()})),J.command("test").description("test the config of Typora").action((()=>{(new V).testConfig()}));const R=[x,E,U,J];class W extends M{commandUse(e){return!0===this.readConfigDetail(this.readConfig(),[e.name(),"enable"])}loadConfig(e){R.map((t=>{this.commandUse(t)&&e.addCommand(t)}))}loadBackupConfig(){console.log(`正在从 ${this.backupPath} 加载备份文件...`);const e=this.readConfig(this.backupPath);this.saveConfig(e,this.configPath),console.log("备份文件加载成功！\n请重新运行命令。")}getCommandList(){const e=[];return R.map((t=>{const o={name:t.name(),enable:this.commandUse(t)};e.push(o)})),e}transConfig(){const e=this.getCommandList();i.prompt([{type:"checkbox",name:"commands",message:"请选择要启用的命令",choices:[...e.map((e=>({name:e.name,value:e.name,checked:e.enable})))]}]).then((async t=>{let o=JSON.parse(JSON.stringify(this.readConfig()));e.map((e=>{o=this.changeConfig(o,[e.name,"enable"],t.commands.includes(e.name))})),await this.saveConfig(o)}))}}const j=C.version,_=new e;_.name("muc").version(j,"-v, --version").description("A Node Cli for Personal Use by BTMUli."),_.option("-l, --list","list all commands").action((e=>{if(e.list){const e=new W,t=[];t.muc={version:j,enable:!0,description:_.description()},R.forEach((o=>{t[o.name()]={version:C.subversion[o.name()],enable:e.commandUse(o),description:o.description()}})),console.table(t)}else _.help()})),_.command("set").description("change subcommand use status").action((()=>{const e=new W;e.transConfig(),e.loadConfig(_)})),_.command("update").description("update muc from upstream").action((()=>{console.log(`\n当前版本：${j}`),console.log("正在检查更新..."),n.get("https://registry.npmjs.org/@btmuli/mucli").then((e=>{const o=e.data["dist-tags"].latest;console.log(`上游版本：${o}`),j<o?i.prompt([{type:"confirm",name:"update",message:"是否更新？",default:!0}]).then((async e=>{e.update?await t("npm i -g @btmuli/mucli",((e,t,o)=>{e?console.log(e):o?console.log(o):console.log(t)})):console.log("已取消更新\n")})):console.log("已是最新版本\n")}))})),_.command("build").description("build ts file").action((()=>{t(`cd ${v} && rollup -c`,((e,t,o)=>{e?console.log(e):o?console.log(o):console.log(t)}))})),_.command("backup").description("backup config file").action((()=>{const e=new W;i.prompt([{type:"confirm",name:"backup",message:"是否备份配置文件？（文件将备份到 backup.yml.bak）",default:!0}]).then((t=>{t.backup?(e.backupConfig(),setInterval((()=>{console.log("已备份配置文件")}),1e3)):console.log("已取消备份")}))})),_.command("hello").description("get a essay from hitokoto.cn").action((()=>{n.get("https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d").then((e=>{const t=e.data.hitokoto,o=e.data.from,n=e.data.id;console.log(`\n${t}\n\n\t\t\t\t\t\t——『${o}』|${n}\n`)}))}));const G=new W;try{G.loadConfig(_),_.parse(process.argv)}catch(e){console.log("\n配置文件加载失败！"),G.loadBackupConfig()}
